
PowerBankFirmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000041a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800060  00800060  0000041a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000041a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000044c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c99  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000795  00000000  00000000  000011c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000083e  00000000  00000000  00001956  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00002194  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053b  00000000  00000000  00002314  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000053c  00000000  00000000  0000284f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002d8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	ff c0       	rjmp	.+510    	; 0x202 <__vector_1>
   4:	1e c0       	rjmp	.+60     	; 0x42 <__bad_interrupt>
   6:	1d c0       	rjmp	.+58     	; 0x42 <__bad_interrupt>
   8:	1c c0       	rjmp	.+56     	; 0x42 <__bad_interrupt>
   a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
   c:	0e c1       	rjmp	.+540    	; 0x22a <__vector_6>
   e:	19 c0       	rjmp	.+50     	; 0x42 <__bad_interrupt>
  10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
  12:	17 c0       	rjmp	.+46     	; 0x42 <__bad_interrupt>
  14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
  16:	15 c0       	rjmp	.+42     	; 0x42 <__bad_interrupt>
  18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
  1a:	13 c0       	rjmp	.+38     	; 0x42 <__bad_interrupt>
  1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
  1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
  20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d1 e0       	ldi	r29, 0x01	; 1
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
  2e:	20 e0       	ldi	r18, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
  36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
  38:	ae 36       	cpi	r26, 0x6E	; 110
  3a:	b2 07       	cpc	r27, r18
  3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
  3e:	55 d1       	rcall	.+682    	; 0x2ea <main>
  40:	b0 c1       	rjmp	.+864    	; 0x3a2 <_exit>

00000042 <__bad_interrupt>:
  42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <FlashLEDs>:
	}
}

void FlashLEDs(int numFlashes)
{
	for (int i = 0; i < numFlashes; i++)
  44:	18 16       	cp	r1, r24
  46:	19 06       	cpc	r1, r25
  48:	fc f4       	brge	.+62     	; 0x88 <FlashLEDs+0x44>
  4a:	20 e0       	ldi	r18, 0x00	; 0
  4c:	30 e0       	ldi	r19, 0x00	; 0
	{
		LED1_OFF, LED2_OFF, LED3_OFF, LED4_OFF;	//all off for 250ms.
  4e:	c0 98       	cbi	0x18, 0	; 24
  50:	d8 98       	cbi	0x1b, 0	; 27
  52:	db 98       	cbi	0x1b, 3	; 27
  54:	da 98       	cbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  56:	e3 e2       	ldi	r30, 0x23	; 35
  58:	f4 ef       	ldi	r31, 0xF4	; 244
  5a:	31 97       	sbiw	r30, 0x01	; 1
  5c:	f1 f7       	brne	.-4      	; 0x5a <FlashLEDs+0x16>
  5e:	00 c0       	rjmp	.+0      	; 0x60 <FlashLEDs+0x1c>
  60:	00 00       	nop
		_delay_ms(250);
		LED1_ON, LED2_ON, LED3_ON, LED4_ON;	//all on for 250ms.
  62:	c0 9a       	sbi	0x18, 0	; 24
  64:	d8 9a       	sbi	0x1b, 0	; 27
  66:	db 9a       	sbi	0x1b, 3	; 27
  68:	da 9a       	sbi	0x1b, 2	; 27
  6a:	e3 e2       	ldi	r30, 0x23	; 35
  6c:	f4 ef       	ldi	r31, 0xF4	; 244
  6e:	31 97       	sbiw	r30, 0x01	; 1
  70:	f1 f7       	brne	.-4      	; 0x6e <FlashLEDs+0x2a>
  72:	00 c0       	rjmp	.+0      	; 0x74 <FlashLEDs+0x30>
  74:	00 00       	nop
		_delay_ms(250);
		LED1_OFF, LED2_OFF, LED3_OFF, LED4_OFF;	//all off for 250ms.
  76:	c0 98       	cbi	0x18, 0	; 24
  78:	d8 98       	cbi	0x1b, 0	; 27
  7a:	db 98       	cbi	0x1b, 3	; 27
  7c:	da 98       	cbi	0x1b, 2	; 27
	}
}

void FlashLEDs(int numFlashes)
{
	for (int i = 0; i < numFlashes; i++)
  7e:	2f 5f       	subi	r18, 0xFF	; 255
  80:	3f 4f       	sbci	r19, 0xFF	; 255
  82:	28 17       	cp	r18, r24
  84:	39 07       	cpc	r19, r25
  86:	19 f7       	brne	.-58     	; 0x4e <FlashLEDs+0xa>
  88:	08 95       	ret

0000008a <ButtonAction>:
		//READ I2C and Update Variables Accordingly.
	}
}

void ButtonAction(void) //Determines short or long button press after interrupt and acts accordingly.
{
  8a:	cf 92       	push	r12
  8c:	df 92       	push	r13
  8e:	ef 92       	push	r14
  90:	ff 92       	push	r15
	int count = 0;

	while(BUTTON_PRESSED && count < 200)	//kick out of loop if held longer than 2s
  92:	86 b3       	in	r24, 0x16	; 22
  94:	84 70       	andi	r24, 0x04	; 4
  96:	86 bb       	out	0x16, r24	; 22
  98:	81 11       	cpse	r24, r1
  9a:	ae c0       	rjmp	.+348    	; 0x1f8 <__stack+0x99>
  9c:	20 e0       	ldi	r18, 0x00	; 0
  9e:	30 e0       	ldi	r19, 0x00	; 0
	{
		count++;
  a0:	2f 5f       	subi	r18, 0xFF	; 255
  a2:	3f 4f       	sbci	r19, 0xFF	; 255
  a4:	83 ec       	ldi	r24, 0xC3	; 195
  a6:	99 e0       	ldi	r25, 0x09	; 9
  a8:	01 97       	sbiw	r24, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <ButtonAction+0x1e>
  ac:	00 c0       	rjmp	.+0      	; 0xae <ButtonAction+0x24>
  ae:	00 00       	nop

void ButtonAction(void) //Determines short or long button press after interrupt and acts accordingly.
{
	int count = 0;

	while(BUTTON_PRESSED && count < 200)	//kick out of loop if held longer than 2s
  b0:	86 b3       	in	r24, 0x16	; 22
  b2:	84 70       	andi	r24, 0x04	; 4
  b4:	86 bb       	out	0x16, r24	; 22
  b6:	81 11       	cpse	r24, r1
  b8:	04 c0       	rjmp	.+8      	; 0xc2 <ButtonAction+0x38>
  ba:	28 3c       	cpi	r18, 0xC8	; 200
  bc:	31 05       	cpc	r19, r1
  be:	81 f7       	brne	.-32     	; 0xa0 <ButtonAction+0x16>
  c0:	53 c0       	rjmp	.+166    	; 0x168 <__stack+0x9>
	{
		count++;
		_delay_ms(10);
	}

	if (count > 10 && count < 80) //press between 100 and 800ms is considered short.
  c2:	c9 01       	movw	r24, r18
  c4:	0b 97       	sbiw	r24, 0x0b	; 11
  c6:	85 34       	cpi	r24, 0x45	; 69
  c8:	91 05       	cpc	r25, r1
  ca:	08 f0       	brcs	.+2      	; 0xce <ButtonAction+0x44>
  cc:	49 c0       	rjmp	.+146    	; 0x160 <__stack+0x1>
	{
		//short button press shows voltage when not charging.
		FlashLEDs(1);	//flash LEDs once to indicate short press.
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	b8 df       	rcall	.-144    	; 0x44 <FlashLEDs>
		if (battPercentage >= 75)
  d4:	c0 90 68 00 	lds	r12, 0x0068	; 0x800068 <battPercentage>
  d8:	d0 90 69 00 	lds	r13, 0x0069	; 0x800069 <battPercentage+0x1>
  dc:	e0 90 6a 00 	lds	r14, 0x006A	; 0x80006a <battPercentage+0x2>
  e0:	f0 90 6b 00 	lds	r15, 0x006B	; 0x80006b <battPercentage+0x3>
  e4:	20 e0       	ldi	r18, 0x00	; 0
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	46 e9       	ldi	r20, 0x96	; 150
  ea:	52 e4       	ldi	r21, 0x42	; 66
  ec:	c7 01       	movw	r24, r14
  ee:	b6 01       	movw	r22, r12
  f0:	30 d1       	rcall	.+608    	; 0x352 <__gesf2>
  f2:	88 23       	and	r24, r24
  f4:	2c f0       	brlt	.+10     	; 0x100 <ButtonAction+0x76>
		{
			LED1_ON, LED2_ON, LED3_ON, LED4_ON;
  f6:	c0 9a       	sbi	0x18, 0	; 24
  f8:	d8 9a       	sbi	0x1b, 0	; 27
  fa:	db 9a       	sbi	0x1b, 3	; 27
  fc:	da 9a       	sbi	0x1b, 2	; 27
  fe:	22 c0       	rjmp	.+68     	; 0x144 <ButtonAction+0xba>
		}
		else if (battPercentage >= 50)
 100:	20 e0       	ldi	r18, 0x00	; 0
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	48 e4       	ldi	r20, 0x48	; 72
 106:	52 e4       	ldi	r21, 0x42	; 66
 108:	c7 01       	movw	r24, r14
 10a:	b6 01       	movw	r22, r12
 10c:	22 d1       	rcall	.+580    	; 0x352 <__gesf2>
 10e:	88 23       	and	r24, r24
 110:	24 f0       	brlt	.+8      	; 0x11a <ButtonAction+0x90>
		{
			LED1_ON, LED2_ON, LED3_ON;
 112:	c0 9a       	sbi	0x18, 0	; 24
 114:	d8 9a       	sbi	0x1b, 0	; 27
 116:	db 9a       	sbi	0x1b, 3	; 27
 118:	15 c0       	rjmp	.+42     	; 0x144 <ButtonAction+0xba>
		}
		else if (battPercentage >= 25)
 11a:	20 e0       	ldi	r18, 0x00	; 0
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	48 ec       	ldi	r20, 0xC8	; 200
 120:	51 e4       	ldi	r21, 0x41	; 65
 122:	c7 01       	movw	r24, r14
 124:	b6 01       	movw	r22, r12
 126:	15 d1       	rcall	.+554    	; 0x352 <__gesf2>
 128:	88 23       	and	r24, r24
 12a:	1c f0       	brlt	.+6      	; 0x132 <ButtonAction+0xa8>
		{
			LED1_ON, LED2_ON;
 12c:	c0 9a       	sbi	0x18, 0	; 24
 12e:	d8 9a       	sbi	0x1b, 0	; 27
 130:	09 c0       	rjmp	.+18     	; 0x144 <ButtonAction+0xba>
		}
		else if (battPercentage > 0)
 132:	20 e0       	ldi	r18, 0x00	; 0
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	a9 01       	movw	r20, r18
 138:	c7 01       	movw	r24, r14
 13a:	b6 01       	movw	r22, r12
 13c:	0a d1       	rcall	.+532    	; 0x352 <__gesf2>
 13e:	18 16       	cp	r1, r24
 140:	0c f4       	brge	.+2      	; 0x144 <ButtonAction+0xba>
		{
			LED1_ON;
 142:	c0 9a       	sbi	0x18, 0	; 24
 144:	9f e7       	ldi	r25, 0x7F	; 127
 146:	2a e1       	ldi	r18, 0x1A	; 26
 148:	86 e0       	ldi	r24, 0x06	; 6
 14a:	91 50       	subi	r25, 0x01	; 1
 14c:	20 40       	sbci	r18, 0x00	; 0
 14e:	80 40       	sbci	r24, 0x00	; 0
 150:	e1 f7       	brne	.-8      	; 0x14a <ButtonAction+0xc0>
 152:	00 c0       	rjmp	.+0      	; 0x154 <ButtonAction+0xca>
 154:	00 00       	nop
		else
		{
			// error (batt below 0)
		}
		_delay_ms(2000);
		LED1_OFF, LED2_OFF, LED3_OFF, LED4_OFF;
 156:	c0 98       	cbi	0x18, 0	; 24
 158:	d8 98       	cbi	0x1b, 0	; 27
 15a:	db 98       	cbi	0x1b, 3	; 27
 15c:	da 98       	cbi	0x1b, 2	; 27
 15e:	4c c0       	rjmp	.+152    	; 0x1f8 <__stack+0x99>
	}
	else if (count >= 80) // press longer than 800ms is considered long.
 160:	20 35       	cpi	r18, 0x50	; 80
 162:	31 05       	cpc	r19, r1
 164:	0c f4       	brge	.+2      	; 0x168 <__stack+0x9>
 166:	48 c0       	rjmp	.+144    	; 0x1f8 <__stack+0x99>
	{
		//long button press shows battery current.
		FlashLEDs(2);	//flash twice to indicate long press.
 168:	82 e0       	ldi	r24, 0x02	; 2
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	6b df       	rcall	.-298    	; 0x44 <FlashLEDs>
		if (battCurrent >= 3)
 16e:	c0 90 64 00 	lds	r12, 0x0064	; 0x800064 <battCurrent>
 172:	d0 90 65 00 	lds	r13, 0x0065	; 0x800065 <battCurrent+0x1>
 176:	e0 90 66 00 	lds	r14, 0x0066	; 0x800066 <battCurrent+0x2>
 17a:	f0 90 67 00 	lds	r15, 0x0067	; 0x800067 <battCurrent+0x3>
 17e:	20 e0       	ldi	r18, 0x00	; 0
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	40 e4       	ldi	r20, 0x40	; 64
 184:	50 e4       	ldi	r21, 0x40	; 64
 186:	c7 01       	movw	r24, r14
 188:	b6 01       	movw	r22, r12
 18a:	e3 d0       	rcall	.+454    	; 0x352 <__gesf2>
 18c:	88 23       	and	r24, r24
 18e:	2c f0       	brlt	.+10     	; 0x19a <__stack+0x3b>
		{
			LED1_ON, LED2_ON, LED3_ON, LED4_ON;
 190:	c0 9a       	sbi	0x18, 0	; 24
 192:	d8 9a       	sbi	0x1b, 0	; 27
 194:	db 9a       	sbi	0x1b, 3	; 27
 196:	da 9a       	sbi	0x1b, 2	; 27
 198:	22 c0       	rjmp	.+68     	; 0x1de <__stack+0x7f>
		}
		else if (battCurrent >= 2)
 19a:	20 e0       	ldi	r18, 0x00	; 0
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	40 e0       	ldi	r20, 0x00	; 0
 1a0:	50 e4       	ldi	r21, 0x40	; 64
 1a2:	c7 01       	movw	r24, r14
 1a4:	b6 01       	movw	r22, r12
 1a6:	d5 d0       	rcall	.+426    	; 0x352 <__gesf2>
 1a8:	88 23       	and	r24, r24
 1aa:	24 f0       	brlt	.+8      	; 0x1b4 <__stack+0x55>
		{
			LED1_ON, LED2_ON, LED3_ON;
 1ac:	c0 9a       	sbi	0x18, 0	; 24
 1ae:	d8 9a       	sbi	0x1b, 0	; 27
 1b0:	db 9a       	sbi	0x1b, 3	; 27
 1b2:	15 c0       	rjmp	.+42     	; 0x1de <__stack+0x7f>
		}
		else if (battCurrent >= 1)
 1b4:	20 e0       	ldi	r18, 0x00	; 0
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	40 e8       	ldi	r20, 0x80	; 128
 1ba:	5f e3       	ldi	r21, 0x3F	; 63
 1bc:	c7 01       	movw	r24, r14
 1be:	b6 01       	movw	r22, r12
 1c0:	c8 d0       	rcall	.+400    	; 0x352 <__gesf2>
 1c2:	88 23       	and	r24, r24
 1c4:	1c f0       	brlt	.+6      	; 0x1cc <__stack+0x6d>
		{
			LED1_ON, LED2_ON;
 1c6:	c0 9a       	sbi	0x18, 0	; 24
 1c8:	d8 9a       	sbi	0x1b, 0	; 27
 1ca:	09 c0       	rjmp	.+18     	; 0x1de <__stack+0x7f>
		}
		else if (battCurrent > 0)
 1cc:	20 e0       	ldi	r18, 0x00	; 0
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	a9 01       	movw	r20, r18
 1d2:	c7 01       	movw	r24, r14
 1d4:	b6 01       	movw	r22, r12
 1d6:	bd d0       	rcall	.+378    	; 0x352 <__gesf2>
 1d8:	18 16       	cp	r1, r24
 1da:	0c f4       	brge	.+2      	; 0x1de <__stack+0x7f>
		{
			LED1_ON;
 1dc:	c0 9a       	sbi	0x18, 0	; 24
 1de:	9f e7       	ldi	r25, 0x7F	; 127
 1e0:	2a e1       	ldi	r18, 0x1A	; 26
 1e2:	86 e0       	ldi	r24, 0x06	; 6
 1e4:	91 50       	subi	r25, 0x01	; 1
 1e6:	20 40       	sbci	r18, 0x00	; 0
 1e8:	80 40       	sbci	r24, 0x00	; 0
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <__stack+0x85>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <__stack+0x8f>
 1ee:	00 00       	nop
		else
		{
			// error (batt current below 0)
		}
		_delay_ms(2000);
		LED1_OFF, LED2_OFF, LED3_OFF, LED4_OFF;
 1f0:	c0 98       	cbi	0x18, 0	; 24
 1f2:	d8 98       	cbi	0x1b, 0	; 27
 1f4:	db 98       	cbi	0x1b, 3	; 27
 1f6:	da 98       	cbi	0x1b, 2	; 27
	}
	else //Do nothing if button press is less than 100ms or other state.
	{
		return;
	}
}
 1f8:	ff 90       	pop	r15
 1fa:	ef 90       	pop	r14
 1fc:	df 90       	pop	r13
 1fe:	cf 90       	pop	r12
 200:	08 95       	ret

00000202 <__vector_1>:
		LED1_OFF, LED2_OFF, LED3_OFF, LED4_OFF;	//all off for 250ms.
	}
}

ISR (EXT_INT0_vect)		//Interrupt based on user button push. Used to wake uC and then set flag that button has been pushed.
{
 202:	1f 92       	push	r1
 204:	0f 92       	push	r0
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	0f 92       	push	r0
 20a:	11 24       	eor	r1, r1
 20c:	8f 93       	push	r24
 20e:	9f 93       	push	r25
	buttonFlag = 1;
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 218:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
}
 21c:	9f 91       	pop	r25
 21e:	8f 91       	pop	r24
 220:	0f 90       	pop	r0
 222:	0f be       	out	0x3f, r0	; 63
 224:	0f 90       	pop	r0
 226:	1f 90       	pop	r1
 228:	18 95       	reti

0000022a <__vector_6>:

ISR (TIM1_COMPA_vect)	//LED sequence to indicate battery charging.
{
 22a:	1f 92       	push	r1
 22c:	0f 92       	push	r0
 22e:	0f b6       	in	r0, 0x3f	; 63
 230:	0f 92       	push	r0
 232:	11 24       	eor	r1, r1
 234:	8f 93       	push	r24
 236:	9f 93       	push	r25
	if (ledCount == 1)
 238:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <ledCount>
 23c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <ledCount+0x1>
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	11 f4       	brne	.+4      	; 0x248 <__vector_6+0x1e>
	{
		LED1_ON;
 244:	c0 9a       	sbi	0x18, 0	; 24
 246:	17 c0       	rjmp	.+46     	; 0x276 <__vector_6+0x4c>
	}
	else if (ledCount == 2)
 248:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <ledCount>
 24c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <ledCount+0x1>
 250:	02 97       	sbiw	r24, 0x02	; 2
 252:	11 f4       	brne	.+4      	; 0x258 <__vector_6+0x2e>
	{
		LED2_ON;
 254:	d8 9a       	sbi	0x1b, 0	; 27
 256:	0f c0       	rjmp	.+30     	; 0x276 <__vector_6+0x4c>
	}
	else if (ledCount == 3)
 258:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <ledCount>
 25c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <ledCount+0x1>
 260:	03 97       	sbiw	r24, 0x03	; 3
 262:	11 f4       	brne	.+4      	; 0x268 <__vector_6+0x3e>
	{
		LED3_ON;
 264:	db 9a       	sbi	0x1b, 3	; 27
 266:	07 c0       	rjmp	.+14     	; 0x276 <__vector_6+0x4c>
	}
	else if (ledCount == 4)
 268:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <ledCount>
 26c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <ledCount+0x1>
 270:	04 97       	sbiw	r24, 0x04	; 4
 272:	09 f4       	brne	.+2      	; 0x276 <__vector_6+0x4c>
	{
		LED4_ON;
 274:	da 9a       	sbi	0x1b, 2	; 27
	}
	if (ledCount > 4)
 276:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <ledCount>
 27a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <ledCount+0x1>
 27e:	05 97       	sbiw	r24, 0x05	; 5
 280:	44 f0       	brlt	.+16     	; 0x292 <__vector_6+0x68>
	{
		ledCount = 0;
 282:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <ledCount+0x1>
 286:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <ledCount>
		LED1_OFF, LED2_OFF, LED3_OFF, LED4_OFF;
 28a:	c0 98       	cbi	0x18, 0	; 24
 28c:	d8 98       	cbi	0x1b, 0	; 27
 28e:	db 98       	cbi	0x1b, 3	; 27
 290:	da 98       	cbi	0x1b, 2	; 27
	}
	ledCount++;
 292:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <ledCount>
 296:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <ledCount+0x1>
 29a:	01 96       	adiw	r24, 0x01	; 1
 29c:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <ledCount+0x1>
 2a0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <ledCount>
}
 2a4:	9f 91       	pop	r25
 2a6:	8f 91       	pop	r24
 2a8:	0f 90       	pop	r0
 2aa:	0f be       	out	0x3f, r0	; 63
 2ac:	0f 90       	pop	r0
 2ae:	1f 90       	pop	r1
 2b0:	18 95       	reti

000002b2 <Setup>:

void Setup(void)
{
	DDRA = 0b10001100;		//Set register A I/O Based on pin out in header file (1 output, 0 input).
 2b2:	8c e8       	ldi	r24, 0x8C	; 140
 2b4:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0b00000000;		//Disable pull up resistors as we have external. Set outputs to initially low. (DDR = 0, 1 enable, 0 disable, DDR = 1, 1 high, 0 low)
 2b6:	1b ba       	out	0x1b, r1	; 27
	DDRB = 0b00000001;		//Set register B based on pin out in header file.
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b00000100;		//Disable pull up resistors. Set outputs initially low.
 2bc:	94 e0       	ldi	r25, 0x04	; 4
 2be:	98 bb       	out	0x18, r25	; 24
	
	ADMUX = 0b00000000;		//ADC ref is Vcc, No mux settings therefore ADC0 is used.
 2c0:	17 b8       	out	0x07, r1	; 7
	ADCSRA = 0b11000111;	//enable (bit 7, disable before sleep) ADC and start conversion (bit 6), 128 prescaler for ADC clock.
 2c2:	97 ec       	ldi	r25, 0xC7	; 199
 2c4:	96 b9       	out	0x06, r25	; 6
	ADCSRB = 0b00000000;	//free running mode
 2c6:	13 b8       	out	0x03, r1	; 3
	DIDR0 = 0b00000001;		//disable digital input buffer on ADC as recommended to reduce power consumption.
 2c8:	81 b9       	out	0x01, r24	; 1
	
	MCUCR = 0b00000000;		//low level of INT0 triggers interrupt
 2ca:	15 be       	out	0x35, r1	; 53
	GIMSK = 0b01010000;		//enable INT0 external interrupt and allow enabling of PC interrupts 0 to 7.
 2cc:	80 e5       	ldi	r24, 0x50	; 80
 2ce:	8b bf       	out	0x3b, r24	; 59
	PCMSK0 = 0b00000000;	//Set bit 1 to 1 to enable PCINT1 interrupt. All others disabled. Only needed if using Lipo charging interrupt.
 2d0:	12 ba       	out	0x12, r1	; 18

	TCCR1A = 0b00000000;	//16 bit timer in CTC mode
 2d2:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0b00001100;	//prescaler 256 and CTC mode
 2d4:	8c e0       	ldi	r24, 0x0C	; 12
 2d6:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 15625;			//Max of 65535, ** T_int = (1Mhz/256)/OCR1A = 0.25s **
 2d8:	89 e0       	ldi	r24, 0x09	; 9
 2da:	9d e3       	ldi	r25, 0x3D	; 61
 2dc:	9b bd       	out	0x2b, r25	; 43
 2de:	8a bd       	out	0x2a, r24	; 42
	TIMSK1 = 0b00000010;		//Generate interrupt on compare match of OCR1A(TCNT1)
 2e0:	82 e0       	ldi	r24, 0x02	; 2
 2e2:	8c b9       	out	0x0c, r24	; 12

	sei();					//global interrupts enabled
 2e4:	78 94       	sei

	USI_TWI_Master_Initialise();
 2e6:	2a d0       	rcall	.+84     	; 0x33c <USI_TWI_Master_Initialise>
 2e8:	08 95       	ret

000002ea <main>:
int buttonFlag = 0;
int flashDelay = 0;

int main(void)
{
	Setup();
 2ea:	e3 df       	rcall	.-58     	; 0x2b2 <Setup>

	while(1)
	{
		battPercentage = (((ADCW*(5/1024))-3.5)/0.7)*100;	//ADCW holds full 10 bit result from ADCH and ADCL registers.
 2ec:	0f 2e       	mov	r0, r31
 2ee:	c1 2c       	mov	r12, r1
 2f0:	d1 2c       	mov	r13, r1
 2f2:	fa ef       	ldi	r31, 0xFA	; 250
 2f4:	ef 2e       	mov	r14, r31
 2f6:	f3 ec       	ldi	r31, 0xC3	; 195
 2f8:	ff 2e       	mov	r15, r31
 2fa:	f0 2d       	mov	r31, r0
			buttonFlag = 0;
		}

		if (battCharging)
		{
			TIMSK1 = 0b00000010;		//Generate timer interrupt on compare match of OCR1A(TCNT1)
 2fc:	c2 e0       	ldi	r28, 0x02	; 2
{
	Setup();

	while(1)
	{
		battPercentage = (((ADCW*(5/1024))-3.5)/0.7)*100;	//ADCW holds full 10 bit result from ADCH and ADCL registers.
 2fe:	84 b1       	in	r24, 0x04	; 4
 300:	95 b1       	in	r25, 0x05	; 5
 302:	c0 92 68 00 	sts	0x0068, r12	; 0x800068 <battPercentage>
 306:	d0 92 69 00 	sts	0x0069, r13	; 0x800069 <battPercentage+0x1>
 30a:	e0 92 6a 00 	sts	0x006A, r14	; 0x80006a <battPercentage+0x2>
 30e:	f0 92 6b 00 	sts	0x006B, r15	; 0x80006b <battPercentage+0x3>
		if (battPercentage < 5)
		{
			//shut down BATFET via i2c. Need to plug into power source to restore BATFET.
		}

		if (buttonFlag == 1)
 312:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 316:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 31a:	01 97       	sbiw	r24, 0x01	; 1
 31c:	29 f4       	brne	.+10     	; 0x328 <main+0x3e>
		{
			ButtonAction();
 31e:	b5 de       	rcall	.-662    	; 0x8a <ButtonAction>
			buttonFlag = 0;
 320:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
 324:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
		}

		if (battCharging)
 328:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <battCharging>
 32c:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <battCharging+0x1>
 330:	89 2b       	or	r24, r25
 332:	11 f0       	breq	.+4      	; 0x338 <main+0x4e>
		{
			TIMSK1 = 0b00000010;		//Generate timer interrupt on compare match of OCR1A(TCNT1)
 334:	cc b9       	out	0x0c, r28	; 12
 336:	e3 cf       	rjmp	.-58     	; 0x2fe <main+0x14>
		}
		else
		{
			TIMSK1 = 0b00000000;		//Disable timer interrupt.
 338:	1c b8       	out	0x0c, r1	; 12
 33a:	e1 cf       	rjmp	.-62     	; 0x2fe <main+0x14>

0000033c <USI_TWI_Master_Initialise>:
/*---------------------------------------------------------------
USI TWI single master initialization function
---------------------------------------------------------------*/
void USI_TWI_Master_Initialise( void )
{
	PORT_USI |= (1<<PIN_USI_SDA);           // Enable pullup on SDA, to set high as released state.
 33c:	c6 9a       	sbi	0x18, 6	; 24
	PORT_USI |= (1<<PIN_USI_SCL);           // Enable pullup on SCL, to set high as released state.
 33e:	c4 9a       	sbi	0x18, 4	; 24
	DDR_USI  |= (1<<PIN_USI_SCL);           // Enable SCL as output.
 340:	d4 9a       	sbi	0x1a, 4	; 26
	DDR_USI  |= (1<<PIN_USI_SDA);           // Enable SDA as output.
 342:	d6 9a       	sbi	0x1a, 6	; 26
	USIDR    =  0xFF;                       // Preload dataregister with "released level" data.
 344:	8f ef       	ldi	r24, 0xFF	; 255
 346:	8f b9       	out	0x0f, r24	; 15
	USICR    =  (0<<USISIE)|(0<<USIOIE)|                            // Disable Interrupts.
 348:	8a e2       	ldi	r24, 0x2A	; 42
 34a:	8d b9       	out	0x0d, r24	; 13
	(1<<USIWM1)|(0<<USIWM0)|                            // Set USI in Two-wire mode.
	(1<<USICS1)|(0<<USICS0)|(1<<USICLK)|                // Software stobe as counter clock source
	(0<<USITC);
	USISR   =   (1<<USISIF)|(1<<USIOIF)|(1<<USIPF)|(1<<USIDC)|      // Clear flags,
 34c:	80 ef       	ldi	r24, 0xF0	; 240
 34e:	8e b9       	out	0x0e, r24	; 14
 350:	08 95       	ret

00000352 <__gesf2>:
 352:	03 d0       	rcall	.+6      	; 0x35a <__fp_cmp>
 354:	08 f4       	brcc	.+2      	; 0x358 <__gesf2+0x6>
 356:	8f ef       	ldi	r24, 0xFF	; 255
 358:	08 95       	ret

0000035a <__fp_cmp>:
 35a:	99 0f       	add	r25, r25
 35c:	00 08       	sbc	r0, r0
 35e:	55 0f       	add	r21, r21
 360:	aa 0b       	sbc	r26, r26
 362:	e0 e8       	ldi	r30, 0x80	; 128
 364:	fe ef       	ldi	r31, 0xFE	; 254
 366:	16 16       	cp	r1, r22
 368:	17 06       	cpc	r1, r23
 36a:	e8 07       	cpc	r30, r24
 36c:	f9 07       	cpc	r31, r25
 36e:	c0 f0       	brcs	.+48     	; 0x3a0 <__fp_cmp+0x46>
 370:	12 16       	cp	r1, r18
 372:	13 06       	cpc	r1, r19
 374:	e4 07       	cpc	r30, r20
 376:	f5 07       	cpc	r31, r21
 378:	98 f0       	brcs	.+38     	; 0x3a0 <__fp_cmp+0x46>
 37a:	62 1b       	sub	r22, r18
 37c:	73 0b       	sbc	r23, r19
 37e:	84 0b       	sbc	r24, r20
 380:	95 0b       	sbc	r25, r21
 382:	39 f4       	brne	.+14     	; 0x392 <__fp_cmp+0x38>
 384:	0a 26       	eor	r0, r26
 386:	61 f0       	breq	.+24     	; 0x3a0 <__fp_cmp+0x46>
 388:	23 2b       	or	r18, r19
 38a:	24 2b       	or	r18, r20
 38c:	25 2b       	or	r18, r21
 38e:	21 f4       	brne	.+8      	; 0x398 <__fp_cmp+0x3e>
 390:	08 95       	ret
 392:	0a 26       	eor	r0, r26
 394:	09 f4       	brne	.+2      	; 0x398 <__fp_cmp+0x3e>
 396:	a1 40       	sbci	r26, 0x01	; 1
 398:	a6 95       	lsr	r26
 39a:	8f ef       	ldi	r24, 0xFF	; 255
 39c:	81 1d       	adc	r24, r1
 39e:	81 1d       	adc	r24, r1
 3a0:	08 95       	ret

000003a2 <_exit>:
 3a2:	f8 94       	cli

000003a4 <__stop_program>:
 3a4:	ff cf       	rjmp	.-2      	; 0x3a4 <__stop_program>
