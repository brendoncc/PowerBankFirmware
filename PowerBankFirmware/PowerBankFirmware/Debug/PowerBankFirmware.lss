
PowerBankFirmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000534  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004a9  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025a  00000000  00000000  00000b91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00000dec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000308  00000000  00000000  00000e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000078  00000000  00000000  00001168  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000011e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__vector_4>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	16 c0       	rjmp	.+44     	; 0x48 <__vector_13>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>
  26:	0f c0       	rjmp	.+30     	; 0x46 <__bad_interrupt>
  28:	0e c0       	rjmp	.+28     	; 0x46 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a0 36       	cpi	r26, 0x60	; 96
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	35 d0       	rcall	.+106    	; 0xae <main>
  44:	36 c0       	rjmp	.+108    	; 0xb2 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <__vector_13>:

	}
}

ISR (TIMER0_COMPA_vect)		//timer based interrupt that triggers on compare match of OCR0A and TCNT0
{
  48:	1f 92       	push	r1
  4a:	0f 92       	push	r0
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	0f 92       	push	r0
  50:	11 24       	eor	r1, r1

}
  52:	0f 90       	pop	r0
  54:	0f be       	out	0x3f, r0	; 63
  56:	0f 90       	pop	r0
  58:	1f 90       	pop	r1
  5a:	18 95       	reti

0000005c <__vector_4>:

ISR (TIMER1_COMPA_vect)		//timer based interrupt that triggers on compare match of OCR1A and TCNT1
{
  5c:	1f 92       	push	r1
  5e:	0f 92       	push	r0
  60:	0f b6       	in	r0, 0x3f	; 63
  62:	0f 92       	push	r0
  64:	11 24       	eor	r1, r1
  66:	8f 93       	push	r24
  68:	9f 93       	push	r25
	LED_TOGGLE;
  6a:	98 b3       	in	r25, 0x18	; 24
  6c:	81 e0       	ldi	r24, 0x01	; 1
  6e:	89 27       	eor	r24, r25
  70:	88 bb       	out	0x18, r24	; 24
}
  72:	9f 91       	pop	r25
  74:	8f 91       	pop	r24
  76:	0f 90       	pop	r0
  78:	0f be       	out	0x3f, r0	; 63
  7a:	0f 90       	pop	r0
  7c:	1f 90       	pop	r1
  7e:	18 95       	reti

00000080 <setup>:

void setup(void)
{
	DDRA = 0b00000000;		//Set register A to all inputs (0)
  80:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0b11111111;		//enable all PORTA pull up resistors (1 enable , 0 disable, only when DDR is set to 0)
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	8b bb       	out	0x1b, r24	; 27
	DDRB = 0b11111111;		//Set register B to all outputs (1)
  86:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b00000000;		//all PORTB outputs initially low (1 high, 0 low)
  88:	18 ba       	out	0x18, r1	; 24
	DDRD = 0b00000000;		//Set register D to all inputs (0)
  8a:	11 ba       	out	0x11, r1	; 17
	PORTD = 0b11111111;		//enable all PORTD pull up resistors (1 enable, 0 disable)
  8c:	82 bb       	out	0x12, r24	; 18
	TCCR0A = 0b00000010;	//8 bit timer in CTC mode
  8e:	92 e0       	ldi	r25, 0x02	; 2
  90:	90 bf       	out	0x30, r25	; 48
	TCCR0B = 0b00000101;	//prescaler 1024
  92:	95 e0       	ldi	r25, 0x05	; 5
  94:	93 bf       	out	0x33, r25	; 51
	OCR0A = 255;			//Max of 255, ** T_int = (1/(8Mhz/Prescaler))*OCR1A =  0.03264s **
  96:	86 bf       	out	0x36, r24	; 54
	TCCR1A = 0b00000000;	//16 bit timer in CTC mode
  98:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0b00001100;	//prescaler 256
  9a:	8c e0       	ldi	r24, 0x0C	; 12
  9c:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 31250;			//Max of 65535, ** T_int = (1/(8Mhz/256))*OCR1A = 1s ** 
  9e:	82 e1       	ldi	r24, 0x12	; 18
  a0:	9a e7       	ldi	r25, 0x7A	; 122
  a2:	9b bd       	out	0x2b, r25	; 43
  a4:	8a bd       	out	0x2a, r24	; 42
	TIMSK = 0b01000001;		//Compare match on OCR1A(TCNT1) and OCR0A(TCNT0)
  a6:	81 e4       	ldi	r24, 0x41	; 65
  a8:	89 bf       	out	0x39, r24	; 57
	sei();					//global interrupts enabled
  aa:	78 94       	sei
  ac:	08 95       	ret

000000ae <main>:
#include "PowerBankHeader.h"
#include "USI_TWI_Master.h"

int main(void)
{
	setup();
  ae:	e8 df       	rcall	.-48     	; 0x80 <setup>

	while (1)
	{

	}
  b0:	ff cf       	rjmp	.-2      	; 0xb0 <main+0x2>

000000b2 <_exit>:
  b2:	f8 94       	cli

000000b4 <__stop_program>:
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <__stop_program>
