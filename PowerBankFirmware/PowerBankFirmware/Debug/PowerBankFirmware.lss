
PowerBankFirmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000b1c  00000bb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800066  00800066  00000bb6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bb6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000be8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000c24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000118a  00000000  00000000  00000cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000082f  00000000  00000000  00001e5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a18  00000000  00000000  0000268d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000022c  00000000  00000000  000030a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055c  00000000  00000000  000032d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000076b  00000000  00000000  00003830  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003f9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	af c1       	rjmp	.+862    	; 0x362 <__vector_1>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	fa c1       	rjmp	.+1012   	; 0x3fe <__vector_4>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	06 c2       	rjmp	.+1036   	; 0x41a <__vector_6>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d1 e0       	ldi	r29, 0x01	; 1
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	ec e1       	ldi	r30, 0x1C	; 28
  36:	fb e0       	ldi	r31, 0x0B	; 11
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a6 36       	cpi	r26, 0x66	; 102
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	20 e0       	ldi	r18, 0x00	; 0
  46:	a6 e6       	ldi	r26, 0x66	; 102
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a7 37       	cpi	r26, 0x77	; 119
  50:	b2 07       	cpc	r27, r18
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	bc d2       	rcall	.+1400   	; 0x5ce <main>
  56:	60 c5       	rjmp	.+2752   	; 0xb18 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <BQShutdown>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  5a:	87 ea       	ldi	r24, 0xA7	; 167
  5c:	91 e6       	ldi	r25, 0x61	; 97
  5e:	01 97       	sbiw	r24, 0x01	; 1
  60:	f1 f7       	brne	.-4      	; 0x5e <BQShutdown+0x4>
  62:	00 c0       	rjmp	.+0      	; 0x64 <BQShutdown+0xa>
  64:	00 00       	nop
// }

void BQShutdown(void) //quick flash of LEDs to show shutdown, then tell BQ to disconnect BATFET
{
	_delay_ms(100);
	LED1_ON,LED2_ON, LED3_ON,LED4_ON;	//flash all LEDs twice quickly to show shutdown
  66:	c0 9a       	sbi	0x18, 0	; 24
  68:	df 9a       	sbi	0x1b, 7	; 27
  6a:	db 9a       	sbi	0x1b, 3	; 27
  6c:	da 9a       	sbi	0x1b, 2	; 27
  6e:	87 ea       	ldi	r24, 0xA7	; 167
  70:	91 e6       	ldi	r25, 0x61	; 97
  72:	01 97       	sbiw	r24, 0x01	; 1
  74:	f1 f7       	brne	.-4      	; 0x72 <BQShutdown+0x18>
  76:	00 c0       	rjmp	.+0      	; 0x78 <BQShutdown+0x1e>
  78:	00 00       	nop
	_delay_ms(100);
	LED1_OFF, LED2_OFF, LED3_OFF, LED4_OFF;
  7a:	c0 98       	cbi	0x18, 0	; 24
  7c:	df 98       	cbi	0x1b, 7	; 27
  7e:	db 98       	cbi	0x1b, 3	; 27
  80:	da 98       	cbi	0x1b, 2	; 27
  82:	87 ea       	ldi	r24, 0xA7	; 167
  84:	91 e6       	ldi	r25, 0x61	; 97
  86:	01 97       	sbiw	r24, 0x01	; 1
  88:	f1 f7       	brne	.-4      	; 0x86 <BQShutdown+0x2c>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <BQShutdown+0x32>
  8c:	00 00       	nop
	_delay_ms(100);
	LED1_ON,LED2_ON, LED3_ON,LED4_ON;
  8e:	c0 9a       	sbi	0x18, 0	; 24
  90:	df 9a       	sbi	0x1b, 7	; 27
  92:	db 9a       	sbi	0x1b, 3	; 27
  94:	da 9a       	sbi	0x1b, 2	; 27
  96:	87 ea       	ldi	r24, 0xA7	; 167
  98:	91 e6       	ldi	r25, 0x61	; 97
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <BQShutdown+0x40>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <BQShutdown+0x46>
  a0:	00 00       	nop
	_delay_ms(100);
	LED1_OFF, LED2_OFF, LED3_OFF, LED4_OFF;
  a2:	c0 98       	cbi	0x18, 0	; 24
  a4:	df 98       	cbi	0x1b, 7	; 27
  a6:	db 98       	cbi	0x1b, 3	; 27
  a8:	da 98       	cbi	0x1b, 2	; 27

	messageBuf[0] = (slaveAdd<<TWI_ADR_BITS) | (0<<TWI_READ_BIT); //first byte: first bit is R/W, upper 7 are address. Set to write
  aa:	e2 e7       	ldi	r30, 0x72	; 114
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <slaveAdd>
  b2:	88 0f       	add	r24, r24
  b4:	80 83       	st	Z, r24
	messageBuf[1] = 0x09;	//second byte: register address to read or write to
  b6:	89 e0       	ldi	r24, 0x09	; 9
  b8:	81 83       	std	Z+1, r24	; 0x01
	messageBuf[2] = 0b01100100; //third byte: Data to write: Force BATFET off
  ba:	84 e6       	ldi	r24, 0x64	; 100
  bc:	82 83       	std	Z+2, r24	; 0x02
	USI_TWI_Start_Transceiver_With_Data(messageBuf,3); //transmit to slave
  be:	63 e0       	ldi	r22, 0x03	; 3
  c0:	cf 01       	movw	r24, r30
  c2:	07 d3       	rcall	.+1550   	; 0x6d2 <USI_TWI_Start_Transceiver_With_Data>
  c4:	08 95       	ret

000000c6 <BQRead>:
}

void BQRead(void)
{
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	83 ec       	ldi	r24, 0xC3	; 195
  cc:	99 e0       	ldi	r25, 0x09	; 9
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <BQRead+0x8>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <BQRead+0xe>
  d4:	00 00       	nop
	_delay_ms(10);

	//read charging status
	messageBuf[0] = (slaveAdd<<TWI_ADR_BITS) | (0<<TWI_READ_BIT); //first byte: first bit is R/W, upper 7 are address. Set to write since we are telling slave what register we want
  d6:	c2 e7       	ldi	r28, 0x72	; 114
  d8:	d0 e0       	ldi	r29, 0x00	; 0
  da:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <slaveAdd>
  de:	88 0f       	add	r24, r24
  e0:	88 83       	st	Y, r24
	messageBuf[1] = 0x0B;	//second byte: register address to read or write to
  e2:	8b e0       	ldi	r24, 0x0B	; 11
  e4:	89 83       	std	Y+1, r24	; 0x01
	USI_TWI_Start_Random_Read(messageBuf,3);	//start I2C read, 3 bytes are 2 bytes to send + 1 byte to read		
  e6:	63 e0       	ldi	r22, 0x03	; 3
  e8:	ce 01       	movw	r24, r28
  ea:	83 d3       	rcall	.+1798   	; 0x7f2 <USI_TWI_Start_Random_Read>
	battCharging = ((messageBuf[1]&(3<<3))>>3); 
  ec:	89 81       	ldd	r24, Y+1	; 0x01
  ee:	88 71       	andi	r24, 0x18	; 24
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	95 95       	asr	r25
  f4:	87 95       	ror	r24
  f6:	95 95       	asr	r25
  f8:	87 95       	ror	r24
  fa:	95 95       	asr	r25
  fc:	87 95       	ror	r24
  fe:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <battCharging+0x1>
 102:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <battCharging>
 106:	83 ec       	ldi	r24, 0xC3	; 195
 108:	99 e0       	ldi	r25, 0x09	; 9
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <BQRead+0x44>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <BQRead+0x4a>
 110:	00 00       	nop
	
	_delay_ms(10);
	
	//start ADC conversion to read voltage and current
	messageBuf[0] = (slaveAdd<<TWI_ADR_BITS) | (0<<TWI_READ_BIT); //first byte: first bit is R/W, upper 7 are address. Set to write
 112:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <slaveAdd>
 116:	88 0f       	add	r24, r24
 118:	88 83       	st	Y, r24
	messageBuf[1] = 0x02;	//second byte: register address to read or write to
 11a:	82 e0       	ldi	r24, 0x02	; 2
 11c:	89 83       	std	Y+1, r24	; 0x01
	messageBuf[2] = 0b10111101; //third byte: Data to write: Start ADC single shot conversion (rest is default)
 11e:	8d eb       	ldi	r24, 0xBD	; 189
 120:	8a 83       	std	Y+2, r24	; 0x02
	USI_TWI_Start_Transceiver_With_Data(messageBuf,3); //transmit to slave
 122:	63 e0       	ldi	r22, 0x03	; 3
 124:	ce 01       	movw	r24, r28
 126:	d5 d2       	rcall	.+1450   	; 0x6d2 <USI_TWI_Start_Transceiver_With_Data>
 128:	83 ec       	ldi	r24, 0xC3	; 195
 12a:	99 e0       	ldi	r25, 0x09	; 9
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <BQRead+0x66>
 130:	00 c0       	rjmp	.+0      	; 0x132 <BQRead+0x6c>
 132:	00 00       	nop
 	
	_delay_ms(10);

	//read battery voltage after ADC conversion
	messageBuf[0] = (slaveAdd<<TWI_ADR_BITS) | (0<<TWI_READ_BIT); //first byte: first bit is R/W, upper 7 are address. Set to write since we are telling slave what register we want
 134:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <slaveAdd>
 138:	88 0f       	add	r24, r24
 13a:	88 83       	st	Y, r24
	messageBuf[1] = 0x0E;	//second byte: register address to read or write to
 13c:	8e e0       	ldi	r24, 0x0E	; 14
 13e:	89 83       	std	Y+1, r24	; 0x01
	USI_TWI_Start_Random_Read(messageBuf,3); //start I2C read, 3 bytes are 2 bytes to send + 1 byte to read
 140:	63 e0       	ldi	r22, 0x03	; 3
 142:	ce 01       	movw	r24, r28
 144:	56 d3       	rcall	.+1708   	; 0x7f2 <USI_TWI_Start_Random_Read>
	battVoltageBQ = ((((messageBuf[1]))*0.02)+2.304); //multiply by 0.02V (V per decimal), offset by 2.304V (register starts at 2.304V)
 146:	69 81       	ldd	r22, Y+1	; 0x01
 148:	70 e0       	ldi	r23, 0x00	; 0
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	c5 d3       	rcall	.+1930   	; 0x8da <__floatsisf>
 150:	2a e0       	ldi	r18, 0x0A	; 10
 152:	37 ed       	ldi	r19, 0xD7	; 215
 154:	43 ea       	ldi	r20, 0xA3	; 163
 156:	5c e3       	ldi	r21, 0x3C	; 60
 158:	74 d4       	rcall	.+2280   	; 0xa42 <__mulsf3>
 15a:	2c eb       	ldi	r18, 0xBC	; 188
 15c:	34 e7       	ldi	r19, 0x74	; 116
 15e:	43 e1       	ldi	r20, 0x13	; 19
 160:	50 e4       	ldi	r21, 0x40	; 64
 162:	51 d3       	rcall	.+1698   	; 0x806 <__addsf3>
 164:	60 93 6a 00 	sts	0x006A, r22	; 0x80006a <battVoltageBQ>
 168:	70 93 6b 00 	sts	0x006B, r23	; 0x80006b <battVoltageBQ+0x1>
 16c:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <battVoltageBQ+0x2>
 170:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <battVoltageBQ+0x3>
 174:	83 ec       	ldi	r24, 0xC3	; 195
 176:	99 e0       	ldi	r25, 0x09	; 9
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <__stack+0x19>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <__stack+0x1f>
 17e:	00 00       	nop
	
	_delay_ms(10);

	//read battery current after ADC conversion
	messageBuf[0] = (slaveAdd<<TWI_ADR_BITS) | (0<<TWI_READ_BIT); //first byte: first bit is R/W, upper 7 are address. Set to write since we are telling slave what register we want
 180:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <slaveAdd>
 184:	88 0f       	add	r24, r24
 186:	88 83       	st	Y, r24
	messageBuf[1] = 0x12;	//second byte: register address to read or write to
 188:	82 e1       	ldi	r24, 0x12	; 18
 18a:	89 83       	std	Y+1, r24	; 0x01
	USI_TWI_Start_Random_Read(messageBuf,3);	//start I2C read, 3 bytes are 2 bytes to send + 1 byte to read
 18c:	63 e0       	ldi	r22, 0x03	; 3
 18e:	ce 01       	movw	r24, r28
 190:	30 d3       	rcall	.+1632   	; 0x7f2 <USI_TWI_Start_Random_Read>
	battCurrentBQ = (((messageBuf[1]))*0.05); // multiply by 0.05A (A per decimal)
 192:	69 81       	ldd	r22, Y+1	; 0x01
 194:	70 e0       	ldi	r23, 0x00	; 0
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	9f d3       	rcall	.+1854   	; 0x8da <__floatsisf>
 19c:	2d ec       	ldi	r18, 0xCD	; 205
 19e:	3c ec       	ldi	r19, 0xCC	; 204
 1a0:	4c e4       	ldi	r20, 0x4C	; 76
 1a2:	5d e3       	ldi	r21, 0x3D	; 61
 1a4:	4e d4       	rcall	.+2204   	; 0xa42 <__mulsf3>
 1a6:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <__data_end>
 1aa:	70 93 67 00 	sts	0x0067, r23	; 0x800067 <__data_end+0x1>
 1ae:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end+0x2>
 1b2:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__data_end+0x3>
}
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	08 95       	ret

000001bc <ButtonActionShort>:

void ButtonActionShort(void) //Short button press shows battery voltage if not charging, shows battery charge current if charging
{
 1bc:	cf 92       	push	r12
 1be:	df 92       	push	r13
 1c0:	ef 92       	push	r14
 1c2:	ff 92       	push	r15
	LED1_OFF, LED2_OFF, LED3_OFF, LED4_OFF;
 1c4:	c0 98       	cbi	0x18, 0	; 24
 1c6:	df 98       	cbi	0x1b, 7	; 27
 1c8:	db 98       	cbi	0x1b, 3	; 27
 1ca:	da 98       	cbi	0x1b, 2	; 27

	if (battCharging == 0x00 || battCharging == 0x03)
 1cc:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <battCharging>
 1d0:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <battCharging+0x1>
 1d4:	00 97       	sbiw	r24, 0x00	; 0
 1d6:	21 f0       	breq	.+8      	; 0x1e0 <ButtonActionShort+0x24>
 1d8:	83 30       	cpi	r24, 0x03	; 3
 1da:	91 05       	cpc	r25, r1
 1dc:	09 f0       	breq	.+2      	; 0x1e0 <ButtonActionShort+0x24>
 1de:	53 c0       	rjmp	.+166    	; 0x286 <ButtonActionShort+0xca>
 1e0:	8f e4       	ldi	r24, 0x4F	; 79
 1e2:	93 ec       	ldi	r25, 0xC3	; 195
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <ButtonActionShort+0x28>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <ButtonActionShort+0x2e>
 1ea:	00 00       	nop
	{
		_delay_ms(200);
		LED1_ON;
 1ec:	c0 9a       	sbi	0x18, 0	; 24
 1ee:	8f e4       	ldi	r24, 0x4F	; 79
 1f0:	93 ec       	ldi	r25, 0xC3	; 195
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <ButtonActionShort+0x36>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <ButtonActionShort+0x3c>
 1f8:	00 00       	nop
		_delay_ms(200);
		LED1_OFF;
 1fa:	c0 98       	cbi	0x18, 0	; 24
 1fc:	8f e4       	ldi	r24, 0x4F	; 79
 1fe:	93 ec       	ldi	r25, 0xC3	; 195
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <ButtonActionShort+0x44>
 204:	00 c0       	rjmp	.+0      	; 0x206 <ButtonActionShort+0x4a>
 206:	00 00       	nop
		_delay_ms(200);

		if (battVoltageBQ >= 4.00)
 208:	c0 90 6a 00 	lds	r12, 0x006A	; 0x80006a <battVoltageBQ>
 20c:	d0 90 6b 00 	lds	r13, 0x006B	; 0x80006b <battVoltageBQ+0x1>
 210:	e0 90 6c 00 	lds	r14, 0x006C	; 0x80006c <battVoltageBQ+0x2>
 214:	f0 90 6d 00 	lds	r15, 0x006D	; 0x80006d <battVoltageBQ+0x3>
 218:	20 e0       	ldi	r18, 0x00	; 0
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	40 e8       	ldi	r20, 0x80	; 128
 21e:	50 e4       	ldi	r21, 0x40	; 64
 220:	c7 01       	movw	r24, r14
 222:	b6 01       	movw	r22, r12
 224:	0a d4       	rcall	.+2068   	; 0xa3a <__gesf2>
 226:	88 23       	and	r24, r24
 228:	2c f0       	brlt	.+10     	; 0x234 <ButtonActionShort+0x78>
		{
			LED1_ON, LED2_ON, LED3_ON, LED4_ON; //4 LEDS on above 4V
 22a:	c0 9a       	sbi	0x18, 0	; 24
 22c:	df 9a       	sbi	0x1b, 7	; 27
 22e:	db 9a       	sbi	0x1b, 3	; 27
 230:	da 9a       	sbi	0x1b, 2	; 27
 232:	7c c0       	rjmp	.+248    	; 0x32c <ButtonActionShort+0x170>
		}
		else if (battVoltageBQ >= 3.65) 
 234:	2a e9       	ldi	r18, 0x9A	; 154
 236:	39 e9       	ldi	r19, 0x99	; 153
 238:	49 e6       	ldi	r20, 0x69	; 105
 23a:	50 e4       	ldi	r21, 0x40	; 64
 23c:	c7 01       	movw	r24, r14
 23e:	b6 01       	movw	r22, r12
 240:	fc d3       	rcall	.+2040   	; 0xa3a <__gesf2>
 242:	88 23       	and	r24, r24
 244:	24 f0       	brlt	.+8      	; 0x24e <ButtonActionShort+0x92>
		{
			LED1_ON, LED2_ON, LED3_ON; //3 LEDS on between 3.65V and 4V
 246:	c0 9a       	sbi	0x18, 0	; 24
 248:	df 9a       	sbi	0x1b, 7	; 27
 24a:	db 9a       	sbi	0x1b, 3	; 27
 24c:	6f c0       	rjmp	.+222    	; 0x32c <ButtonActionShort+0x170>
		}
		else if (battVoltageBQ >= 3.40)
 24e:	2a e9       	ldi	r18, 0x9A	; 154
 250:	39 e9       	ldi	r19, 0x99	; 153
 252:	49 e5       	ldi	r20, 0x59	; 89
 254:	50 e4       	ldi	r21, 0x40	; 64
 256:	c7 01       	movw	r24, r14
 258:	b6 01       	movw	r22, r12
 25a:	ef d3       	rcall	.+2014   	; 0xa3a <__gesf2>
 25c:	88 23       	and	r24, r24
 25e:	1c f0       	brlt	.+6      	; 0x266 <ButtonActionShort+0xaa>
		{
			LED1_ON, LED2_ON; //2 LEDS on between 3.4V and 3.65V
 260:	c0 9a       	sbi	0x18, 0	; 24
 262:	df 9a       	sbi	0x1b, 7	; 27
 264:	63 c0       	rjmp	.+198    	; 0x32c <ButtonActionShort+0x170>
		}
		else if (battVoltageBQ >= uvlo_voltage)
 266:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
 26a:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
 26e:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <__data_start+0x2>
 272:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <__data_start+0x3>
 276:	c7 01       	movw	r24, r14
 278:	b6 01       	movw	r22, r12
 27a:	df d3       	rcall	.+1982   	; 0xa3a <__gesf2>
 27c:	88 23       	and	r24, r24
 27e:	0c f4       	brge	.+2      	; 0x282 <ButtonActionShort+0xc6>
 280:	55 c0       	rjmp	.+170    	; 0x32c <ButtonActionShort+0x170>
		{
			LED1_ON; //1 LED on between 3.0V and 3.4V (shuts down below 3.0V)
 282:	c0 9a       	sbi	0x18, 0	; 24
 284:	53 c0       	rjmp	.+166    	; 0x32c <ButtonActionShort+0x170>
		}
		else
		{
		}
	}
	else if (battCharging == 0x01 || battCharging == 0x02)
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	02 97       	sbiw	r24, 0x02	; 2
 28a:	08 f0       	brcs	.+2      	; 0x28e <ButtonActionShort+0xd2>
 28c:	4f c0       	rjmp	.+158    	; 0x32c <ButtonActionShort+0x170>
 28e:	8f e4       	ldi	r24, 0x4F	; 79
 290:	93 ec       	ldi	r25, 0xC3	; 195
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <ButtonActionShort+0xd6>
 296:	00 c0       	rjmp	.+0      	; 0x298 <ButtonActionShort+0xdc>
 298:	00 00       	nop
	{
		_delay_ms(200);
		LED1_ON,LED2_ON;
 29a:	c0 9a       	sbi	0x18, 0	; 24
 29c:	df 9a       	sbi	0x1b, 7	; 27
 29e:	8f e4       	ldi	r24, 0x4F	; 79
 2a0:	93 ec       	ldi	r25, 0xC3	; 195
 2a2:	01 97       	sbiw	r24, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <ButtonActionShort+0xe6>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <ButtonActionShort+0xec>
 2a8:	00 00       	nop
		_delay_ms(200);
		LED1_OFF,LED2_OFF;
 2aa:	c0 98       	cbi	0x18, 0	; 24
 2ac:	df 98       	cbi	0x1b, 7	; 27
 2ae:	8f e4       	ldi	r24, 0x4F	; 79
 2b0:	93 ec       	ldi	r25, 0xC3	; 195
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <ButtonActionShort+0xf6>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <ButtonActionShort+0xfc>
 2b8:	00 00       	nop
		_delay_ms(200);

		if (battCurrentBQ >= 1.5)
 2ba:	c0 90 66 00 	lds	r12, 0x0066	; 0x800066 <__data_end>
 2be:	d0 90 67 00 	lds	r13, 0x0067	; 0x800067 <__data_end+0x1>
 2c2:	e0 90 68 00 	lds	r14, 0x0068	; 0x800068 <__data_end+0x2>
 2c6:	f0 90 69 00 	lds	r15, 0x0069	; 0x800069 <__data_end+0x3>
 2ca:	20 e0       	ldi	r18, 0x00	; 0
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	40 ec       	ldi	r20, 0xC0	; 192
 2d0:	5f e3       	ldi	r21, 0x3F	; 63
 2d2:	c7 01       	movw	r24, r14
 2d4:	b6 01       	movw	r22, r12
 2d6:	b1 d3       	rcall	.+1890   	; 0xa3a <__gesf2>
 2d8:	88 23       	and	r24, r24
 2da:	2c f0       	brlt	.+10     	; 0x2e6 <ButtonActionShort+0x12a>
		{
			LED1_ON, LED2_ON, LED3_ON, LED4_ON; //4 LEDS on above 1.5A.
 2dc:	c0 9a       	sbi	0x18, 0	; 24
 2de:	df 9a       	sbi	0x1b, 7	; 27
 2e0:	db 9a       	sbi	0x1b, 3	; 27
 2e2:	da 9a       	sbi	0x1b, 2	; 27
 2e4:	23 c0       	rjmp	.+70     	; 0x32c <ButtonActionShort+0x170>
		}
		else if (battCurrentBQ >= 1)
 2e6:	20 e0       	ldi	r18, 0x00	; 0
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	40 e8       	ldi	r20, 0x80	; 128
 2ec:	5f e3       	ldi	r21, 0x3F	; 63
 2ee:	c7 01       	movw	r24, r14
 2f0:	b6 01       	movw	r22, r12
 2f2:	a3 d3       	rcall	.+1862   	; 0xa3a <__gesf2>
 2f4:	88 23       	and	r24, r24
 2f6:	24 f0       	brlt	.+8      	; 0x300 <ButtonActionShort+0x144>
		{
			LED1_ON, LED2_ON, LED3_ON; //3 LEDS on between 1A and 1.5A
 2f8:	c0 9a       	sbi	0x18, 0	; 24
 2fa:	df 9a       	sbi	0x1b, 7	; 27
 2fc:	db 9a       	sbi	0x1b, 3	; 27
 2fe:	16 c0       	rjmp	.+44     	; 0x32c <ButtonActionShort+0x170>
		}
		else if (battCurrentBQ >= 0.5)
 300:	20 e0       	ldi	r18, 0x00	; 0
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	40 e0       	ldi	r20, 0x00	; 0
 306:	5f e3       	ldi	r21, 0x3F	; 63
 308:	c7 01       	movw	r24, r14
 30a:	b6 01       	movw	r22, r12
 30c:	96 d3       	rcall	.+1836   	; 0xa3a <__gesf2>
 30e:	88 23       	and	r24, r24
 310:	1c f0       	brlt	.+6      	; 0x318 <ButtonActionShort+0x15c>
		{
			LED1_ON, LED2_ON; //2 LEDS on between 0.5A and 1.0A
 312:	c0 9a       	sbi	0x18, 0	; 24
 314:	df 9a       	sbi	0x1b, 7	; 27
 316:	0a c0       	rjmp	.+20     	; 0x32c <ButtonActionShort+0x170>
		}
		else if (battCurrentBQ >= 0.05)
 318:	2d ec       	ldi	r18, 0xCD	; 205
 31a:	3c ec       	ldi	r19, 0xCC	; 204
 31c:	4c e4       	ldi	r20, 0x4C	; 76
 31e:	5d e3       	ldi	r21, 0x3D	; 61
 320:	c7 01       	movw	r24, r14
 322:	b6 01       	movw	r22, r12
 324:	8a d3       	rcall	.+1812   	; 0xa3a <__gesf2>
 326:	88 23       	and	r24, r24
 328:	0c f0       	brlt	.+2      	; 0x32c <ButtonActionShort+0x170>
		{
			LED1_ON; //1 LED on between 0.05 and 0.5A
 32a:	c0 9a       	sbi	0x18, 0	; 24
 32c:	9f e3       	ldi	r25, 0x3F	; 63
 32e:	2d e0       	ldi	r18, 0x0D	; 13
 330:	83 e0       	ldi	r24, 0x03	; 3
 332:	91 50       	subi	r25, 0x01	; 1
 334:	20 40       	sbci	r18, 0x00	; 0
 336:	80 40       	sbci	r24, 0x00	; 0
 338:	e1 f7       	brne	.-8      	; 0x332 <ButtonActionShort+0x176>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <ButtonActionShort+0x180>
 33c:	00 00       	nop
		else
		{
		}
	}
	_delay_ms(1000);
	LED1_OFF, LED2_OFF, LED3_OFF, LED4_OFF;
 33e:	c0 98       	cbi	0x18, 0	; 24
 340:	df 98       	cbi	0x1b, 7	; 27
 342:	db 98       	cbi	0x1b, 3	; 27
 344:	da 98       	cbi	0x1b, 2	; 27
 346:	9f e9       	ldi	r25, 0x9F	; 159
 348:	26 e8       	ldi	r18, 0x86	; 134
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	91 50       	subi	r25, 0x01	; 1
 34e:	20 40       	sbci	r18, 0x00	; 0
 350:	80 40       	sbci	r24, 0x00	; 0
 352:	e1 f7       	brne	.-8      	; 0x34c <ButtonActionShort+0x190>
 354:	00 c0       	rjmp	.+0      	; 0x356 <ButtonActionShort+0x19a>
 356:	00 00       	nop
	_delay_ms(500);
}
 358:	ff 90       	pop	r15
 35a:	ef 90       	pop	r14
 35c:	df 90       	pop	r13
 35e:	cf 90       	pop	r12
 360:	08 95       	ret

00000362 <__vector_1>:


ISR (EXT_INT0_vect)		//Interrupt based on user button push. Used to wake uC and call function
{
 362:	1f 92       	push	r1
 364:	0f 92       	push	r0
 366:	0f b6       	in	r0, 0x3f	; 63
 368:	0f 92       	push	r0
 36a:	11 24       	eor	r1, r1
 36c:	2f 93       	push	r18
 36e:	3f 93       	push	r19
 370:	4f 93       	push	r20
 372:	5f 93       	push	r21
 374:	6f 93       	push	r22
 376:	7f 93       	push	r23
 378:	8f 93       	push	r24
 37a:	9f 93       	push	r25
 37c:	af 93       	push	r26
 37e:	bf 93       	push	r27
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
 384:	ef 93       	push	r30
 386:	ff 93       	push	r31
	int buttoncount = 0;
	ledCount = 0; //reset LED count for charging pattern timer so it doesnt start halfway when button is pushed during charging
 388:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <ledCount+0x1>
 38c:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <ledCount>

	while(BUTTON_PRESSED && buttoncount <= 500)
 390:	86 b3       	in	r24, 0x16	; 22
 392:	84 70       	andi	r24, 0x04	; 4
 394:	86 bb       	out	0x16, r24	; 22
 396:	81 11       	cpse	r24, r1
 398:	1b c0       	rjmp	.+54     	; 0x3d0 <__vector_1+0x6e>
 39a:	c0 e0       	ldi	r28, 0x00	; 0
 39c:	d0 e0       	ldi	r29, 0x00	; 0
	{
		buttoncount++;
 39e:	21 96       	adiw	r28, 0x01	; 1
 3a0:	83 ec       	ldi	r24, 0xC3	; 195
 3a2:	99 e0       	ldi	r25, 0x09	; 9
 3a4:	01 97       	sbiw	r24, 0x01	; 1
 3a6:	f1 f7       	brne	.-4      	; 0x3a4 <__vector_1+0x42>
 3a8:	00 c0       	rjmp	.+0      	; 0x3aa <__vector_1+0x48>
 3aa:	00 00       	nop
ISR (EXT_INT0_vect)		//Interrupt based on user button push. Used to wake uC and call function
{
	int buttoncount = 0;
	ledCount = 0; //reset LED count for charging pattern timer so it doesnt start halfway when button is pushed during charging

	while(BUTTON_PRESSED && buttoncount <= 500)
 3ac:	86 b3       	in	r24, 0x16	; 22
 3ae:	84 70       	andi	r24, 0x04	; 4
 3b0:	86 bb       	out	0x16, r24	; 22
 3b2:	81 11       	cpse	r24, r1
 3b4:	05 c0       	rjmp	.+10     	; 0x3c0 <__vector_1+0x5e>
 3b6:	c5 3f       	cpi	r28, 0xF5	; 245
 3b8:	91 e0       	ldi	r25, 0x01	; 1
 3ba:	d9 07       	cpc	r29, r25
 3bc:	81 f7       	brne	.-32     	; 0x39e <__vector_1+0x3c>
 3be:	0a c0       	rjmp	.+20     	; 0x3d4 <__vector_1+0x72>
	{
		buttoncount++;
		_delay_ms(10);
	}
	
	BQRead();	
 3c0:	82 de       	rcall	.-764    	; 0xc6 <BQRead>

	if (buttoncount > 500)
 3c2:	c5 3f       	cpi	r28, 0xF5	; 245
 3c4:	d1 40       	sbci	r29, 0x01	; 1
 3c6:	14 f0       	brlt	.+4      	; 0x3cc <__vector_1+0x6a>
	{
		BQShutdown();
 3c8:	48 de       	rcall	.-880    	; 0x5a <BQShutdown>
 3ca:	06 c0       	rjmp	.+12     	; 0x3d8 <__vector_1+0x76>
	}
	else
	{
		ButtonActionShort();
 3cc:	f7 de       	rcall	.-530    	; 0x1bc <ButtonActionShort>
 3ce:	04 c0       	rjmp	.+8      	; 0x3d8 <__vector_1+0x76>
	{
		buttoncount++;
		_delay_ms(10);
	}
	
	BQRead();	
 3d0:	7a de       	rcall	.-780    	; 0xc6 <BQRead>
 3d2:	fc cf       	rjmp	.-8      	; 0x3cc <__vector_1+0x6a>
 3d4:	78 de       	rcall	.-784    	; 0xc6 <BQRead>
 3d6:	f8 cf       	rjmp	.-16     	; 0x3c8 <__vector_1+0x66>
	}
	else
	{
		ButtonActionShort();
	}
}
 3d8:	ff 91       	pop	r31
 3da:	ef 91       	pop	r30
 3dc:	df 91       	pop	r29
 3de:	cf 91       	pop	r28
 3e0:	bf 91       	pop	r27
 3e2:	af 91       	pop	r26
 3e4:	9f 91       	pop	r25
 3e6:	8f 91       	pop	r24
 3e8:	7f 91       	pop	r23
 3ea:	6f 91       	pop	r22
 3ec:	5f 91       	pop	r21
 3ee:	4f 91       	pop	r20
 3f0:	3f 91       	pop	r19
 3f2:	2f 91       	pop	r18
 3f4:	0f 90       	pop	r0
 3f6:	0f be       	out	0x3f, r0	; 63
 3f8:	0f 90       	pop	r0
 3fa:	1f 90       	pop	r1
 3fc:	18 95       	reti

000003fe <__vector_4>:

ISR (WATCHDOG_vect)		//watchdog interrupt wakes uC every 8s to monitor
{
 3fe:	1f 92       	push	r1
 400:	0f 92       	push	r0
 402:	0f b6       	in	r0, 0x3f	; 63
 404:	0f 92       	push	r0
 406:	11 24       	eor	r1, r1
 408:	8f 93       	push	r24
	WDTCSR = 0b01101001;	//set watchdog back to interrupt instead of reset. If this doesnt happen, second watchdog time out results in reset. 
 40a:	89 e6       	ldi	r24, 0x69	; 105
 40c:	81 bd       	out	0x21, r24	; 33
}
 40e:	8f 91       	pop	r24
 410:	0f 90       	pop	r0
 412:	0f be       	out	0x3f, r0	; 63
 414:	0f 90       	pop	r0
 416:	1f 90       	pop	r1
 418:	18 95       	reti

0000041a <__vector_6>:

ISR (TIM1_COMPA_vect)	//LED sequence to indicate battery charging and dynamically show voltage increasing.
{
 41a:	1f 92       	push	r1
 41c:	0f 92       	push	r0
 41e:	0f b6       	in	r0, 0x3f	; 63
 420:	0f 92       	push	r0
 422:	11 24       	eor	r1, r1
 424:	2f 93       	push	r18
 426:	3f 93       	push	r19
 428:	4f 93       	push	r20
 42a:	5f 93       	push	r21
 42c:	6f 93       	push	r22
 42e:	7f 93       	push	r23
 430:	8f 93       	push	r24
 432:	9f 93       	push	r25
 434:	af 93       	push	r26
 436:	bf 93       	push	r27
 438:	ef 93       	push	r30
 43a:	ff 93       	push	r31
		//Need to characterize battery pack and correspond accurate voltages to percentages
		if (ledCount == 1 && battVoltageBQ >= uvlo_voltage) //0 - 25% capacity
 43c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <ledCount>
 440:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <ledCount+0x1>
 444:	01 97       	sbiw	r24, 0x01	; 1
 446:	a9 f4       	brne	.+42     	; 0x472 <__vector_6+0x58>
 448:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
 44c:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
 450:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <__data_start+0x2>
 454:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <__data_start+0x3>
 458:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <battVoltageBQ>
 45c:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <battVoltageBQ+0x1>
 460:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <battVoltageBQ+0x2>
 464:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <battVoltageBQ+0x3>
 468:	e8 d2       	rcall	.+1488   	; 0xa3a <__gesf2>
 46a:	88 23       	and	r24, r24
 46c:	14 f0       	brlt	.+4      	; 0x472 <__vector_6+0x58>
		{
			LED1_ON;
 46e:	c0 9a       	sbi	0x18, 0	; 24
 470:	44 c0       	rjmp	.+136    	; 0x4fa <__vector_6+0xe0>
		}
		else if (ledCount == 2 && battVoltageBQ >= 3.40) //25 - 50% capacity
 472:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <ledCount>
 476:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <ledCount+0x1>
 47a:	02 97       	sbiw	r24, 0x02	; 2
 47c:	89 f4       	brne	.+34     	; 0x4a0 <__vector_6+0x86>
 47e:	2a e9       	ldi	r18, 0x9A	; 154
 480:	39 e9       	ldi	r19, 0x99	; 153
 482:	49 e5       	ldi	r20, 0x59	; 89
 484:	50 e4       	ldi	r21, 0x40	; 64
 486:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <battVoltageBQ>
 48a:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <battVoltageBQ+0x1>
 48e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <battVoltageBQ+0x2>
 492:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <battVoltageBQ+0x3>
 496:	d1 d2       	rcall	.+1442   	; 0xa3a <__gesf2>
 498:	88 23       	and	r24, r24
 49a:	14 f0       	brlt	.+4      	; 0x4a0 <__vector_6+0x86>
		{
			LED2_ON;
 49c:	df 9a       	sbi	0x1b, 7	; 27
 49e:	2d c0       	rjmp	.+90     	; 0x4fa <__vector_6+0xe0>
		}
		else if (ledCount == 3 && battVoltageBQ >= 3.65) //50 - 75% capacity
 4a0:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <ledCount>
 4a4:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <ledCount+0x1>
 4a8:	03 97       	sbiw	r24, 0x03	; 3
 4aa:	89 f4       	brne	.+34     	; 0x4ce <__vector_6+0xb4>
 4ac:	2a e9       	ldi	r18, 0x9A	; 154
 4ae:	39 e9       	ldi	r19, 0x99	; 153
 4b0:	49 e6       	ldi	r20, 0x69	; 105
 4b2:	50 e4       	ldi	r21, 0x40	; 64
 4b4:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <battVoltageBQ>
 4b8:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <battVoltageBQ+0x1>
 4bc:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <battVoltageBQ+0x2>
 4c0:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <battVoltageBQ+0x3>
 4c4:	ba d2       	rcall	.+1396   	; 0xa3a <__gesf2>
 4c6:	88 23       	and	r24, r24
 4c8:	14 f0       	brlt	.+4      	; 0x4ce <__vector_6+0xb4>
		{
			LED3_ON;
 4ca:	db 9a       	sbi	0x1b, 3	; 27
 4cc:	16 c0       	rjmp	.+44     	; 0x4fa <__vector_6+0xe0>
		}
		else if (ledCount == 4 && battVoltageBQ >= 4.00) // 75 - 100% capacity 
 4ce:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <ledCount>
 4d2:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <ledCount+0x1>
 4d6:	04 97       	sbiw	r24, 0x04	; 4
 4d8:	81 f4       	brne	.+32     	; 0x4fa <__vector_6+0xe0>
 4da:	20 e0       	ldi	r18, 0x00	; 0
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	40 e8       	ldi	r20, 0x80	; 128
 4e0:	50 e4       	ldi	r21, 0x40	; 64
 4e2:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <battVoltageBQ>
 4e6:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <battVoltageBQ+0x1>
 4ea:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <battVoltageBQ+0x2>
 4ee:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <battVoltageBQ+0x3>
 4f2:	a3 d2       	rcall	.+1350   	; 0xa3a <__gesf2>
 4f4:	88 23       	and	r24, r24
 4f6:	0c f0       	brlt	.+2      	; 0x4fa <__vector_6+0xe0>
		{
			LED4_ON;
 4f8:	da 9a       	sbi	0x1b, 2	; 27
		}
		if (ledCount > 4)
 4fa:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <ledCount>
 4fe:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <ledCount+0x1>
 502:	05 97       	sbiw	r24, 0x05	; 5
 504:	44 f0       	brlt	.+16     	; 0x516 <__vector_6+0xfc>
		{
			ledCount = 0;
 506:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <ledCount+0x1>
 50a:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <ledCount>
			LED1_OFF, LED2_OFF, LED3_OFF, LED4_OFF;
 50e:	c0 98       	cbi	0x18, 0	; 24
 510:	df 98       	cbi	0x1b, 7	; 27
 512:	db 98       	cbi	0x1b, 3	; 27
 514:	da 98       	cbi	0x1b, 2	; 27
		}
		ledCount++;
 516:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <ledCount>
 51a:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <ledCount+0x1>
 51e:	01 96       	adiw	r24, 0x01	; 1
 520:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <ledCount+0x1>
 524:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <ledCount>
}
 528:	ff 91       	pop	r31
 52a:	ef 91       	pop	r30
 52c:	bf 91       	pop	r27
 52e:	af 91       	pop	r26
 530:	9f 91       	pop	r25
 532:	8f 91       	pop	r24
 534:	7f 91       	pop	r23
 536:	6f 91       	pop	r22
 538:	5f 91       	pop	r21
 53a:	4f 91       	pop	r20
 53c:	3f 91       	pop	r19
 53e:	2f 91       	pop	r18
 540:	0f 90       	pop	r0
 542:	0f be       	out	0x3f, r0	; 63
 544:	0f 90       	pop	r0
 546:	1f 90       	pop	r1
 548:	18 95       	reti

0000054a <Setup>:

void Setup(void)
{
	DDRA = 0b10001100;		//Set register A I/O Based on pin out in header file (1 output, 0 input).
 54a:	8c e8       	ldi	r24, 0x8C	; 140
 54c:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0b00000000;		//Disable pull up resistors as we have external. Set outputs to initially low. (DDR = 0, 1 enable, 0 disable, DDR = 1, 1 high, 0 low)
 54e:	1b ba       	out	0x1b, r1	; 27
	DDRB = 0b00000001;		//Set register B based on pin out in header file.
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b00000100;		//Disable pull up resistors. Set outputs initially low.
 554:	94 e0       	ldi	r25, 0x04	; 4
 556:	98 bb       	out	0x18, r25	; 24
	
	PRR = 0b00000001;		//make sure //ADCs// and timers are powered up. Write 0b00000001 to shut down ADC before sleep
 558:	80 b9       	out	0x00, r24	; 0
	//ADMUX = 0b00000000;		//ADC ref is Vcc, No mux settings therefore ADC0 is used.
	//ADCSRA = 0b11100000;	//enable (bit 7, disable before sleep) ADC, start conversion (bit 6), enable auto trigger, no prescaler for ADC clock.
	//ADCSRB = 0b00010000;	//free running mode, left adjust result to read only ADCH 8 bit 
	//DIDR0 = 0b00000001;		//disable digital input buffer on ADC as recommended to reduce power consumption.
	
	MCUCR = 0b00110000;		//enable sleep mode, sleep; command set to power down. Can only wake from INT0 low level or watchdog.
 55a:	80 e3       	ldi	r24, 0x30	; 48
 55c:	85 bf       	out	0x35, r24	; 53
	GIMSK = 0b01010000;		//enable INT0 external interrupt and allow enabling of PC interrupts 0 to 7.
 55e:	80 e5       	ldi	r24, 0x50	; 80
 560:	8b bf       	out	0x3b, r24	; 59
	PCMSK0 = 0b00000000;	//Set bit 1 to 1 to enable PCINT1 interrupt. All others disabled. Only needed if using Lipo charging interrupt.
 562:	12 ba       	out	0x12, r1	; 18

	TCCR1A = 0b00000000;	//16 bit timer in CTC mode
 564:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0b00001100;	//prescaler 256 and CTC mode
 566:	8c e0       	ldi	r24, 0x0C	; 12
 568:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 15625/8;		//Max of 65535, ** T_int = (1Mhz/256)/OCR1A = 0.5s **
 56a:	81 ea       	ldi	r24, 0xA1	; 161
 56c:	97 e0       	ldi	r25, 0x07	; 7
 56e:	9b bd       	out	0x2b, r25	; 43
 570:	8a bd       	out	0x2a, r24	; 42
	TIMSK1 = 0b00000000;	//Set bit 1 to generate interrupt on compare match of OCR1A(TCNT1)
 572:	1c b8       	out	0x0c, r1	; 12

	WDTCSR = 0b01101001;	//watchdog enabled, set to interrupt not reset. 8s watchdog timing. If watchdog not reset after interrupt, next watchdog timeout will cause reset. 
 574:	89 e6       	ldi	r24, 0x69	; 105
 576:	81 bd       	out	0x21, r24	; 33
 578:	8f e4       	ldi	r24, 0x4F	; 79
 57a:	93 ec       	ldi	r25, 0xC3	; 195
 57c:	01 97       	sbiw	r24, 0x01	; 1
 57e:	f1 f7       	brne	.-4      	; 0x57c <Setup+0x32>
 580:	00 c0       	rjmp	.+0      	; 0x582 <Setup+0x38>
 582:	00 00       	nop

	_delay_ms(200);
	LED1_ON,LED2_ON, LED3_ON,LED4_ON;	//flash all LEDs twice to show power on (slower than shutdown LED flash so user can tell the difference)
 584:	c0 9a       	sbi	0x18, 0	; 24
 586:	df 9a       	sbi	0x1b, 7	; 27
 588:	db 9a       	sbi	0x1b, 3	; 27
 58a:	da 9a       	sbi	0x1b, 2	; 27
 58c:	8f e4       	ldi	r24, 0x4F	; 79
 58e:	93 ec       	ldi	r25, 0xC3	; 195
 590:	01 97       	sbiw	r24, 0x01	; 1
 592:	f1 f7       	brne	.-4      	; 0x590 <Setup+0x46>
 594:	00 c0       	rjmp	.+0      	; 0x596 <Setup+0x4c>
 596:	00 00       	nop
	_delay_ms(200);
	LED1_OFF, LED2_OFF, LED3_OFF, LED4_OFF;
 598:	c0 98       	cbi	0x18, 0	; 24
 59a:	df 98       	cbi	0x1b, 7	; 27
 59c:	db 98       	cbi	0x1b, 3	; 27
 59e:	da 98       	cbi	0x1b, 2	; 27
 5a0:	8f e4       	ldi	r24, 0x4F	; 79
 5a2:	93 ec       	ldi	r25, 0xC3	; 195
 5a4:	01 97       	sbiw	r24, 0x01	; 1
 5a6:	f1 f7       	brne	.-4      	; 0x5a4 <Setup+0x5a>
 5a8:	00 c0       	rjmp	.+0      	; 0x5aa <Setup+0x60>
 5aa:	00 00       	nop
	_delay_ms(200);
	LED1_ON,LED2_ON, LED3_ON,LED4_ON;
 5ac:	c0 9a       	sbi	0x18, 0	; 24
 5ae:	df 9a       	sbi	0x1b, 7	; 27
 5b0:	db 9a       	sbi	0x1b, 3	; 27
 5b2:	da 9a       	sbi	0x1b, 2	; 27
 5b4:	8f e4       	ldi	r24, 0x4F	; 79
 5b6:	93 ec       	ldi	r25, 0xC3	; 195
 5b8:	01 97       	sbiw	r24, 0x01	; 1
 5ba:	f1 f7       	brne	.-4      	; 0x5b8 <Setup+0x6e>
 5bc:	00 c0       	rjmp	.+0      	; 0x5be <Setup+0x74>
 5be:	00 00       	nop
	_delay_ms(200);
	LED1_OFF, LED2_OFF, LED3_OFF, LED4_OFF;
 5c0:	c0 98       	cbi	0x18, 0	; 24
 5c2:	df 98       	cbi	0x1b, 7	; 27
 5c4:	db 98       	cbi	0x1b, 3	; 27
 5c6:	da 98       	cbi	0x1b, 2	; 27

	sei();	//global interrupts enabled
 5c8:	78 94       	sei

	USI_TWI_Master_Initialise();	//initalize I2C interface
 5ca:	3a d0       	rcall	.+116    	; 0x640 <USI_TWI_Master_Initialise>
 5cc:	08 95       	ret

000005ce <main>:

*/

int main(void)
{
	Setup();
 5ce:	bd df       	rcall	.-134    	; 0x54a <Setup>
 5d0:	83 ed       	ldi	r24, 0xD3	; 211
 5d2:	90 e3       	ldi	r25, 0x30	; 48
 5d4:	01 97       	sbiw	r24, 0x01	; 1
 5d6:	f1 f7       	brne	.-4      	; 0x5d4 <main+0x6>
 5d8:	00 c0       	rjmp	.+0      	; 0x5da <main+0xc>
 5da:	00 00       	nop
	_delay_ms(50); //time for BQ25895 to fully start up before sampling ADCs and I2C. 
	BQRead(); //initial status, gets read again before any action so that registers can update
 5dc:	74 dd       	rcall	.-1304   	; 0xc6 <BQRead>
				TIMSK1 = 0b00000000;	//Disable timer compare match that drives LED timing
				LED1_ON,LED2_ON, LED3_ON,LED4_ON; //all LEDs on to show battery fully charged
			}
			else
			{
				TIMSK1 = 0b00000010;	//Enable timer compare match that drives LED timing
 5de:	c2 e0       	ldi	r28, 0x02	; 2
	while(1)
	{
		//Check if BQ25895 will automatically update input current when unrecognized supply. 
		//If not, check if charging supply is unrecognized, if so, every 30s, re run the detection algorithm 
		//ReadADC();
		BQRead();
 5e0:	72 dd       	rcall	.-1308   	; 0xc6 <BQRead>

		if (battVoltageBQ < uvlo_voltage) //UVLO threshold
 5e2:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
 5e6:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
 5ea:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <__data_start+0x2>
 5ee:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <__data_start+0x3>
 5f2:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <battVoltageBQ>
 5f6:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <battVoltageBQ+0x1>
 5fa:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <battVoltageBQ+0x2>
 5fe:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <battVoltageBQ+0x3>
 602:	65 d1       	rcall	.+714    	; 0x8ce <__cmpsf2>
 604:	88 23       	and	r24, r24
 606:	0c f4       	brge	.+2      	; 0x60a <main+0x3c>
		{
			BQShutdown();
 608:	28 dd       	rcall	.-1456   	; 0x5a <BQShutdown>
		}

		//add if statement for fault here - blink lights rapidly for fault. To read the current fault status, the host has to read REG0C two times consecutively.
 
		if (battCharging)
 60a:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <battCharging>
 60e:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <battCharging+0x1>
 612:	00 97       	sbiw	r24, 0x00	; 0
 614:	51 f0       	breq	.+20     	; 0x62a <main+0x5c>
		{
			if(battCharging == 0x03)
 616:	03 97       	sbiw	r24, 0x03	; 3
 618:	31 f4       	brne	.+12     	; 0x626 <main+0x58>
			{
				TIMSK1 = 0b00000000;	//Disable timer compare match that drives LED timing
 61a:	1c b8       	out	0x0c, r1	; 12
				LED1_ON,LED2_ON, LED3_ON,LED4_ON; //all LEDs on to show battery fully charged
 61c:	c0 9a       	sbi	0x18, 0	; 24
 61e:	df 9a       	sbi	0x1b, 7	; 27
 620:	db 9a       	sbi	0x1b, 3	; 27
 622:	da 9a       	sbi	0x1b, 2	; 27
 624:	dd cf       	rjmp	.-70     	; 0x5e0 <main+0x12>
			}
			else
			{
				TIMSK1 = 0b00000010;	//Enable timer compare match that drives LED timing
 626:	cc b9       	out	0x0c, r28	; 12
 628:	db cf       	rjmp	.-74     	; 0x5e0 <main+0x12>
			}

		}
		else
		{
			TIMSK1 = 0b00000000;	//Disable timer compare match that drives LED timing
 62a:	1c b8       	out	0x0c, r1	; 12
			ledCount = 0;
 62c:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <ledCount+0x1>
 630:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <ledCount>
			LED1_OFF, LED2_OFF, LED3_OFF, LED4_OFF;
 634:	c0 98       	cbi	0x18, 0	; 24
 636:	df 98       	cbi	0x1b, 7	; 27
 638:	db 98       	cbi	0x1b, 3	; 27
 63a:	da 98       	cbi	0x1b, 2	; 27
			sleep_cpu(); //sleep CPU, only way to wake is INT0 or watchdog. 
 63c:	88 95       	sleep
 63e:	d0 cf       	rjmp	.-96     	; 0x5e0 <main+0x12>

00000640 <USI_TWI_Master_Initialise>:
Use this function to get hold of the error message from the last transmission
---------------------------------------------------------------*/
unsigned char USI_TWI_Get_State_Info( void )
{
	return ( USI_TWI_state.errorState );                            // Return error state.
}
 640:	de 9a       	sbi	0x1b, 6	; 27
 642:	dc 9a       	sbi	0x1b, 4	; 27
 644:	d4 9a       	sbi	0x1a, 4	; 26
 646:	d6 9a       	sbi	0x1a, 6	; 26
 648:	8f ef       	ldi	r24, 0xFF	; 255
 64a:	8f b9       	out	0x0f, r24	; 15
 64c:	8a e2       	ldi	r24, 0x2A	; 42
 64e:	8d b9       	out	0x0d, r24	; 13
 650:	80 ef       	ldi	r24, 0xF0	; 240
 652:	8e b9       	out	0x0e, r24	; 14
 654:	08 95       	ret

00000656 <USI_TWI_Master_Transfer>:
Data to be sent has to be placed into the USIDR prior to calling
this function. Data read, will be return'ed from the function.
---------------------------------------------------------------*/
unsigned char USI_TWI_Master_Transfer( unsigned char temp )
{
	USISR = temp;                                     // Set USISR according to temp.
 656:	8e b9       	out	0x0e, r24	; 14
	(1<<USICS1)|(0<<USICS0)|(1<<USICLK)|     // Software clock strobe as source.
	(1<<USITC);                              // Toggle Clock Port.
	do
	{
		_delay_us(T2_TWI);
		USICR = temp;                          // Generate positve SCL edge.
 658:	8b e2       	ldi	r24, 0x2B	; 43
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 65a:	00 c0       	rjmp	.+0      	; 0x65c <USI_TWI_Master_Transfer+0x6>
 65c:	00 c0       	rjmp	.+0      	; 0x65e <USI_TWI_Master_Transfer+0x8>
 65e:	00 00       	nop
 660:	8d b9       	out	0x0d, r24	; 13
		while( !(PIN_USI & (1<<PIN_USI_SCL)) );// Wait for SCL to go high.
 662:	cc 9b       	sbis	0x19, 4	; 25
 664:	fe cf       	rjmp	.-4      	; 0x662 <USI_TWI_Master_Transfer+0xc>
 666:	00 c0       	rjmp	.+0      	; 0x668 <USI_TWI_Master_Transfer+0x12>
 668:	00 c0       	rjmp	.+0      	; 0x66a <USI_TWI_Master_Transfer+0x14>
		_delay_us(T4_TWI);
		USICR = temp;                          // Generate negative SCL edge.
 66a:	8d b9       	out	0x0d, r24	; 13
	}while( !(USISR & (1<<USIOIF)) );        // Check for transfer complete.
 66c:	76 9b       	sbis	0x0e, 6	; 14
 66e:	f5 cf       	rjmp	.-22     	; 0x65a <USI_TWI_Master_Transfer+0x4>
 670:	00 c0       	rjmp	.+0      	; 0x672 <USI_TWI_Master_Transfer+0x1c>
 672:	00 c0       	rjmp	.+0      	; 0x674 <USI_TWI_Master_Transfer+0x1e>
 674:	00 00       	nop
	
	_delay_us(T2_TWI);
	temp  = USIDR;                           // Read out data.
 676:	8f b1       	in	r24, 0x0f	; 15
	USIDR = 0xFF;                            // Release SDA.
 678:	9f ef       	ldi	r25, 0xFF	; 255
 67a:	9f b9       	out	0x0f, r25	; 15
	DDR_USI |= (1<<PIN_USI_SDA);             // Enable SDA as output.
 67c:	d6 9a       	sbi	0x1a, 6	; 26

	return temp;                             // Return the data from the USIDR
}
 67e:	08 95       	ret

00000680 <USI_TWI_Master_Start>:
Function for generating a TWI Start Condition.
---------------------------------------------------------------*/
unsigned char USI_TWI_Master_Start( void )
{
	/* Release SCL to ensure that (repeated) Start can be performed */
	PORT_USI |= (1<<PIN_USI_SCL);                     // Release SCL.
 680:	dc 9a       	sbi	0x1b, 4	; 27
	while( !(PORT_USI & (1<<PIN_USI_SCL)) );          // Verify that SCL becomes high.
 682:	dc 9b       	sbis	0x1b, 4	; 27
 684:	fe cf       	rjmp	.-4      	; 0x682 <USI_TWI_Master_Start+0x2>
 686:	00 c0       	rjmp	.+0      	; 0x688 <USI_TWI_Master_Start+0x8>
 688:	00 c0       	rjmp	.+0      	; 0x68a <USI_TWI_Master_Start+0xa>
 68a:	00 00       	nop
	_delay_us(T2_TWI);

	/* Generate Start Condition */
	PORT_USI &= ~(1<<PIN_USI_SDA);                    // Force SDA LOW.
 68c:	de 98       	cbi	0x1b, 6	; 27
 68e:	00 c0       	rjmp	.+0      	; 0x690 <USI_TWI_Master_Start+0x10>
 690:	00 c0       	rjmp	.+0      	; 0x692 <USI_TWI_Master_Start+0x12>
	_delay_us(T4_TWI);
	PORT_USI &= ~(1<<PIN_USI_SCL);                    // Pull SCL LOW.
 692:	dc 98       	cbi	0x1b, 4	; 27
	PORT_USI |= (1<<PIN_USI_SDA);                     // Release SDA.
 694:	de 9a       	sbi	0x1b, 6	; 27

	#ifdef SIGNAL_VERIFY
	if( !(USISR & (1<<USISIF)) )
 696:	77 99       	sbic	0x0e, 7	; 14
 698:	05 c0       	rjmp	.+10     	; 0x6a4 <USI_TWI_Master_Start+0x24>
	{
		USI_TWI_state.errorState = USI_TWI_MISSING_START_CON;
 69a:	83 e0       	ldi	r24, 0x03	; 3
 69c:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <USI_TWI_state>
		return (0);
 6a0:	80 e0       	ldi	r24, 0x00	; 0
 6a2:	08 95       	ret
	}
	#endif
	return (1);
 6a4:	81 e0       	ldi	r24, 0x01	; 1
}
 6a6:	08 95       	ret

000006a8 <USI_TWI_Master_Stop>:
Function for generating a TWI Stop Condition. Used to release
the TWI bus.
---------------------------------------------------------------*/
unsigned char USI_TWI_Master_Stop( void )
{
	PORT_USI &= ~(1<<PIN_USI_SDA);           // Pull SDA low.
 6a8:	de 98       	cbi	0x1b, 6	; 27
	PORT_USI |= (1<<PIN_USI_SCL);            // Release SCL.
 6aa:	dc 9a       	sbi	0x1b, 4	; 27
	while( !(PIN_USI & (1<<PIN_USI_SCL)) );  // Wait for SCL to go high.
 6ac:	cc 9b       	sbis	0x19, 4	; 25
 6ae:	fe cf       	rjmp	.-4      	; 0x6ac <USI_TWI_Master_Stop+0x4>
 6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <USI_TWI_Master_Stop+0xa>
 6b2:	00 c0       	rjmp	.+0      	; 0x6b4 <USI_TWI_Master_Stop+0xc>
	_delay_us(T4_TWI);
	PORT_USI |= (1<<PIN_USI_SDA);            // Release SDA.
 6b4:	de 9a       	sbi	0x1b, 6	; 27
 6b6:	00 c0       	rjmp	.+0      	; 0x6b8 <USI_TWI_Master_Stop+0x10>
 6b8:	00 c0       	rjmp	.+0      	; 0x6ba <USI_TWI_Master_Stop+0x12>
 6ba:	00 00       	nop
	_delay_us(T2_TWI);
	
	#ifdef SIGNAL_VERIFY
	if( !(USISR & (1<<USIPF)) )
 6bc:	9e b1       	in	r25, 0x0e	; 14
 6be:	89 2f       	mov	r24, r25
 6c0:	80 72       	andi	r24, 0x20	; 32
 6c2:	95 fd       	sbrc	r25, 5
 6c4:	04 c0       	rjmp	.+8      	; 0x6ce <USI_TWI_Master_Stop+0x26>
	{
		USI_TWI_state.errorState = USI_TWI_MISSING_STOP_CON;
 6c6:	94 e0       	ldi	r25, 0x04	; 4
 6c8:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <USI_TWI_state>
		return (0);
 6cc:	08 95       	ret
	}
	#endif

	return (1);
 6ce:	81 e0       	ldi	r24, 0x01	; 1
}
 6d0:	08 95       	ret

000006d2 <USI_TWI_Start_Transceiver_With_Data>:

Success or error code is returned. Error codes are defined in
USI_TWI_Master.h
---------------------------------------------------------------*/
unsigned char USI_TWI_Start_Transceiver_With_Data( unsigned char *msg, unsigned char msgSize)
{
 6d2:	8f 92       	push	r8
 6d4:	9f 92       	push	r9
 6d6:	af 92       	push	r10
 6d8:	bf 92       	push	r11
 6da:	cf 92       	push	r12
 6dc:	df 92       	push	r13
 6de:	ef 92       	push	r14
 6e0:	ff 92       	push	r15
 6e2:	0f 93       	push	r16
 6e4:	1f 93       	push	r17
 6e6:	cf 93       	push	r28
 6e8:	df 93       	push	r29
 6ea:	7c 01       	movw	r14, r24
 6ec:	d6 2f       	mov	r29, r22
	unsigned char savedMsgSize;

	//This clear must be done before calling this function so that memReadMode can be specified.
	//  USI_TWI_state.errorState = 0;				// Clears all mode bits also

	USI_TWI_state.addressMode = 1;			// Always true for first byte
 6ee:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <USI_TWI_state>
 6f2:	81 60       	ori	r24, 0x01	; 1
 6f4:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <USI_TWI_state>
		USI_TWI_state.errorState = USI_TWI_UE_DATA_COL;
		return (0);
	}
	#endif

	if ( !(*msg & (1<<TWI_READ_BIT)) )                // The LSB in the address byte determines if is a masterRead or masterWrite operation.
 6f8:	f7 01       	movw	r30, r14
 6fa:	80 81       	ld	r24, Z
 6fc:	80 fd       	sbrc	r24, 0
 6fe:	05 c0       	rjmp	.+10     	; 0x70a <USI_TWI_Start_Transceiver_With_Data+0x38>
	{
		USI_TWI_state.masterWriteDataMode = 1;
 700:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <USI_TWI_state>
 704:	82 60       	ori	r24, 0x02	; 2
 706:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <USI_TWI_state>
	//	{
	savedMsg = msg;
	savedMsgSize = msgSize;
	//	}

	if ( !USI_TWI_Master_Start( ))
 70a:	ba df       	rcall	.-140    	; 0x680 <USI_TWI_Master_Start>
 70c:	98 2f       	mov	r25, r24
 70e:	88 23       	and	r24, r24
 710:	09 f4       	brne	.+2      	; 0x714 <USI_TWI_Start_Transceiver_With_Data+0x42>
 712:	61 c0       	rjmp	.+194    	; 0x7d6 <USI_TWI_Start_Transceiver_With_Data+0x104>
 714:	cd 2f       	mov	r28, r29
 716:	87 01       	movw	r16, r14
			*(msg++)  = USI_TWI_Master_Transfer( tempUSISR_8bit );

			/* Prepare to generate ACK (or NACK in case of End Of Transmission) */
			if( msgSize == 1)                            // If transmission of last byte was performed.
			{
				USIDR = 0xFF;                              // Load NACK to confirm End Of Transmission.
 718:	bb 24       	eor	r11, r11
 71a:	ba 94       	dec	r11
			if ((!USI_TWI_state.addressMode) && USI_TWI_state.memReadMode)// means memory start address has been written
			{
				msg = savedMsg;					// start at slave address again
				*(msg) |= (1<<TWI_READ_BIT);  // set the Read Bit on Slave address
				USI_TWI_state.errorState = 0;
				USI_TWI_state.addressMode = 1;	// Now set up for the Read cycle
 71c:	aa 24       	eor	r10, r10
 71e:	a3 94       	inc	r10
				return (0);
			}
			
			if ((!USI_TWI_state.addressMode) && USI_TWI_state.memReadMode)// means memory start address has been written
			{
				msg = savedMsg;					// start at slave address again
 720:	8e 2c       	mov	r8, r14
 722:	9f 2c       	mov	r9, r15

	/*Write address and Read/Write data */
	do
	{
		/* If masterWrite cycle (or inital address tranmission)*/
		if (USI_TWI_state.addressMode || USI_TWI_state.masterWriteDataMode)
 724:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <USI_TWI_state>
 728:	93 70       	andi	r25, 0x03	; 3
 72a:	c1 f1       	breq	.+112    	; 0x79c <USI_TWI_Start_Transceiver_With_Data+0xca>
		{
			/* Write a byte */
			PORT_USI &= ~(1<<PIN_USI_SCL);                // Pull SCL LOW.
 72c:	dc 98       	cbi	0x1b, 4	; 27
			USIDR     = *(msg++);                        // Setup data.
 72e:	68 01       	movw	r12, r16
 730:	ff ef       	ldi	r31, 0xFF	; 255
 732:	cf 1a       	sub	r12, r31
 734:	df 0a       	sbc	r13, r31
 736:	f8 01       	movw	r30, r16
 738:	80 81       	ld	r24, Z
 73a:	8f b9       	out	0x0f, r24	; 15
			USI_TWI_Master_Transfer( tempUSISR_8bit );    // Send 8 bits on bus.
 73c:	80 ef       	ldi	r24, 0xF0	; 240
 73e:	8b df       	rcall	.-234    	; 0x656 <USI_TWI_Master_Transfer>
			
			/* Clock and verify (N)ACK from slave */
			DDR_USI  &= ~(1<<PIN_USI_SDA);                // Enable SDA as input.
 740:	d6 98       	cbi	0x1a, 6	; 26
			if( USI_TWI_Master_Transfer( tempUSISR_1bit ) & (1<<TWI_NACK_BIT) )
 742:	8e ef       	ldi	r24, 0xFE	; 254
 744:	88 df       	rcall	.-240    	; 0x656 <USI_TWI_Master_Transfer>
 746:	80 ff       	sbrs	r24, 0
 748:	0f c0       	rjmp	.+30     	; 0x768 <USI_TWI_Start_Transceiver_With_Data+0x96>
			{
				if ( USI_TWI_state.addressMode )
 74a:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <USI_TWI_state>
 74e:	98 2f       	mov	r25, r24
 750:	91 70       	andi	r25, 0x01	; 1
 752:	80 ff       	sbrs	r24, 0
 754:	05 c0       	rjmp	.+10     	; 0x760 <USI_TWI_Start_Transceiver_With_Data+0x8e>
				USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_ADDRESS;
 756:	81 e0       	ldi	r24, 0x01	; 1
 758:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <USI_TWI_state>
				else
				USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_DATA;
				return (0);
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	3b c0       	rjmp	.+118    	; 0x7d6 <USI_TWI_Start_Transceiver_With_Data+0x104>
			if( USI_TWI_Master_Transfer( tempUSISR_1bit ) & (1<<TWI_NACK_BIT) )
			{
				if ( USI_TWI_state.addressMode )
				USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_ADDRESS;
				else
				USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_DATA;
 760:	82 e0       	ldi	r24, 0x02	; 2
 762:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <USI_TWI_state>
 766:	37 c0       	rjmp	.+110    	; 0x7d6 <USI_TWI_Start_Transceiver_With_Data+0x104>
				return (0);
			}
			
			if ((!USI_TWI_state.addressMode) && USI_TWI_state.memReadMode)// means memory start address has been written
 768:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <USI_TWI_state>
 76c:	95 70       	andi	r25, 0x05	; 5
 76e:	94 30       	cpi	r25, 0x04	; 4
 770:	71 f4       	brne	.+28     	; 0x78e <USI_TWI_Start_Transceiver_With_Data+0xbc>
			{
				msg = savedMsg;					// start at slave address again
				*(msg) |= (1<<TWI_READ_BIT);  // set the Read Bit on Slave address
 772:	f7 01       	movw	r30, r14
 774:	80 81       	ld	r24, Z
 776:	81 60       	ori	r24, 0x01	; 1
 778:	80 83       	st	Z, r24
				USI_TWI_state.errorState = 0;
				USI_TWI_state.addressMode = 1;	// Now set up for the Read cycle
 77a:	a0 92 76 00 	sts	0x0076, r10	; 0x800076 <USI_TWI_state>
				msgSize = savedMsgSize;				// Set byte count correctly
				// NOte that the length should be Slave adrs byte + # bytes to read + 1 (gets decremented below)
				if ( !USI_TWI_Master_Start( ))
 77e:	80 df       	rcall	.-256    	; 0x680 <USI_TWI_Master_Start>
 780:	98 2f       	mov	r25, r24
 782:	81 11       	cpse	r24, r1
 784:	1d c0       	rjmp	.+58     	; 0x7c0 <USI_TWI_Start_Transceiver_With_Data+0xee>
				{
					USI_TWI_state.errorState = USI_TWI_BAD_MEM_READ;
 786:	8a e0       	ldi	r24, 0x0A	; 10
 788:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <USI_TWI_state>
					return (0);                           // Send a START condition on the TWI bus.
 78c:	24 c0       	rjmp	.+72     	; 0x7d6 <USI_TWI_Start_Transceiver_With_Data+0x104>
				}
			}
			else
			{
				USI_TWI_state.addressMode = 0;            // Only perform address transmission once.
 78e:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <USI_TWI_state>
 792:	8e 7f       	andi	r24, 0xFE	; 254
 794:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <USI_TWI_state>
		/* If masterWrite cycle (or inital address tranmission)*/
		if (USI_TWI_state.addressMode || USI_TWI_state.masterWriteDataMode)
		{
			/* Write a byte */
			PORT_USI &= ~(1<<PIN_USI_SCL);                // Pull SCL LOW.
			USIDR     = *(msg++);                        // Setup data.
 798:	86 01       	movw	r16, r12
 79a:	15 c0       	rjmp	.+42     	; 0x7c6 <USI_TWI_Start_Transceiver_With_Data+0xf4>
		}
		/* Else masterRead cycle*/
		else
		{
			/* Read a data byte */
			DDR_USI   &= ~(1<<PIN_USI_SDA);               // Enable SDA as input.
 79c:	d6 98       	cbi	0x1a, 6	; 26
			*(msg++)  = USI_TWI_Master_Transfer( tempUSISR_8bit );
 79e:	68 01       	movw	r12, r16
 7a0:	ff ef       	ldi	r31, 0xFF	; 255
 7a2:	cf 1a       	sub	r12, r31
 7a4:	df 0a       	sbc	r13, r31
 7a6:	80 ef       	ldi	r24, 0xF0	; 240
 7a8:	56 df       	rcall	.-340    	; 0x656 <USI_TWI_Master_Transfer>
 7aa:	f8 01       	movw	r30, r16
 7ac:	80 83       	st	Z, r24

			/* Prepare to generate ACK (or NACK in case of End Of Transmission) */
			if( msgSize == 1)                            // If transmission of last byte was performed.
 7ae:	c1 30       	cpi	r28, 0x01	; 1
 7b0:	11 f4       	brne	.+4      	; 0x7b6 <USI_TWI_Start_Transceiver_With_Data+0xe4>
			{
				USIDR = 0xFF;                              // Load NACK to confirm End Of Transmission.
 7b2:	bf b8       	out	0x0f, r11	; 15
 7b4:	01 c0       	rjmp	.+2      	; 0x7b8 <USI_TWI_Start_Transceiver_With_Data+0xe6>
			}
			else
			{
				USIDR = 0x00;                              // Load ACK. Set data register bit 7 (output for SDA) low.
 7b6:	1f b8       	out	0x0f, r1	; 15
			}
			USI_TWI_Master_Transfer( tempUSISR_1bit );   // Generate ACK/NACK.
 7b8:	8e ef       	ldi	r24, 0xFE	; 254
 7ba:	4d df       	rcall	.-358    	; 0x656 <USI_TWI_Master_Transfer>
		/* Else masterRead cycle*/
		else
		{
			/* Read a data byte */
			DDR_USI   &= ~(1<<PIN_USI_SDA);               // Enable SDA as input.
			*(msg++)  = USI_TWI_Master_Transfer( tempUSISR_8bit );
 7bc:	86 01       	movw	r16, r12
 7be:	03 c0       	rjmp	.+6      	; 0x7c6 <USI_TWI_Start_Transceiver_With_Data+0xf4>
			{
				msg = savedMsg;					// start at slave address again
				*(msg) |= (1<<TWI_READ_BIT);  // set the Read Bit on Slave address
				USI_TWI_state.errorState = 0;
				USI_TWI_state.addressMode = 1;	// Now set up for the Read cycle
				msgSize = savedMsgSize;				// Set byte count correctly
 7c0:	cd 2f       	mov	r28, r29
				return (0);
			}
			
			if ((!USI_TWI_state.addressMode) && USI_TWI_state.memReadMode)// means memory start address has been written
			{
				msg = savedMsg;					// start at slave address again
 7c2:	08 2d       	mov	r16, r8
 7c4:	19 2d       	mov	r17, r9
			{
				USIDR = 0x00;                              // Load ACK. Set data register bit 7 (output for SDA) low.
			}
			USI_TWI_Master_Transfer( tempUSISR_1bit );   // Generate ACK/NACK.
		}
	}while( --msgSize) ;                             // Until all data sent/received.
 7c6:	c1 50       	subi	r28, 0x01	; 1
 7c8:	09 f0       	breq	.+2      	; 0x7cc <USI_TWI_Start_Transceiver_With_Data+0xfa>
 7ca:	ac cf       	rjmp	.-168    	; 0x724 <USI_TWI_Start_Transceiver_With_Data+0x52>
	
	if (!USI_TWI_Master_Stop())
 7cc:	6d df       	rcall	.-294    	; 0x6a8 <USI_TWI_Master_Stop>
 7ce:	91 e0       	ldi	r25, 0x01	; 1
 7d0:	81 11       	cpse	r24, r1
 7d2:	01 c0       	rjmp	.+2      	; 0x7d6 <USI_TWI_Start_Transceiver_With_Data+0x104>
 7d4:	90 e0       	ldi	r25, 0x00	; 0
		return (0);                           // Send a STOP condition on the TWI bus.
	}

	/* Transmission successfully completed*/
	return (1);
}
 7d6:	89 2f       	mov	r24, r25
 7d8:	df 91       	pop	r29
 7da:	cf 91       	pop	r28
 7dc:	1f 91       	pop	r17
 7de:	0f 91       	pop	r16
 7e0:	ff 90       	pop	r15
 7e2:	ef 90       	pop	r14
 7e4:	df 90       	pop	r13
 7e6:	cf 90       	pop	r12
 7e8:	bf 90       	pop	r11
 7ea:	af 90       	pop	r10
 7ec:	9f 90       	pop	r9
 7ee:	8f 90       	pop	r8
 7f0:	08 95       	ret

000007f2 <USI_TWI_Start_Random_Read>:
Success or error code is returned. Error codes are defined in
USI_TWI_Master.h
---------------------------------------------------------------*/
unsigned char USI_TWI_Start_Random_Read( unsigned char *msg, unsigned char msgSize)
{
	*(msg) &= ~(1<<TWI_READ_BIT);		// clear the read bit if it's set
 7f2:	fc 01       	movw	r30, r24
 7f4:	20 81       	ld	r18, Z
 7f6:	2e 7f       	andi	r18, 0xFE	; 254
 7f8:	20 83       	st	Z, r18
	USI_TWI_state.errorState = 0;
	USI_TWI_state.memReadMode = 1;
 7fa:	24 e0       	ldi	r18, 0x04	; 4
 7fc:	20 93 76 00 	sts	0x0076, r18	; 0x800076 <USI_TWI_state>
	
	return (USI_TWI_Start_Transceiver_With_Data( msg, msgSize));
 800:	68 df       	rcall	.-304    	; 0x6d2 <USI_TWI_Start_Transceiver_With_Data>
}
 802:	08 95       	ret

00000804 <__subsf3>:
 804:	50 58       	subi	r21, 0x80	; 128

00000806 <__addsf3>:
 806:	bb 27       	eor	r27, r27
 808:	aa 27       	eor	r26, r26
 80a:	0e d0       	rcall	.+28     	; 0x828 <__addsf3x>
 80c:	dc c0       	rjmp	.+440    	; 0x9c6 <__fp_round>
 80e:	cd d0       	rcall	.+410    	; 0x9aa <__fp_pscA>
 810:	30 f0       	brcs	.+12     	; 0x81e <__addsf3+0x18>
 812:	d2 d0       	rcall	.+420    	; 0x9b8 <__fp_pscB>
 814:	20 f0       	brcs	.+8      	; 0x81e <__addsf3+0x18>
 816:	31 f4       	brne	.+12     	; 0x824 <__addsf3+0x1e>
 818:	9f 3f       	cpi	r25, 0xFF	; 255
 81a:	11 f4       	brne	.+4      	; 0x820 <__addsf3+0x1a>
 81c:	1e f4       	brtc	.+6      	; 0x824 <__addsf3+0x1e>
 81e:	c2 c0       	rjmp	.+388    	; 0x9a4 <__fp_nan>
 820:	0e f4       	brtc	.+2      	; 0x824 <__addsf3+0x1e>
 822:	e0 95       	com	r30
 824:	e7 fb       	bst	r30, 7
 826:	b8 c0       	rjmp	.+368    	; 0x998 <__fp_inf>

00000828 <__addsf3x>:
 828:	e9 2f       	mov	r30, r25
 82a:	de d0       	rcall	.+444    	; 0x9e8 <__fp_split3>
 82c:	80 f3       	brcs	.-32     	; 0x80e <__addsf3+0x8>
 82e:	ba 17       	cp	r27, r26
 830:	62 07       	cpc	r22, r18
 832:	73 07       	cpc	r23, r19
 834:	84 07       	cpc	r24, r20
 836:	95 07       	cpc	r25, r21
 838:	18 f0       	brcs	.+6      	; 0x840 <__addsf3x+0x18>
 83a:	71 f4       	brne	.+28     	; 0x858 <__addsf3x+0x30>
 83c:	9e f5       	brtc	.+102    	; 0x8a4 <__addsf3x+0x7c>
 83e:	f6 c0       	rjmp	.+492    	; 0xa2c <__fp_zero>
 840:	0e f4       	brtc	.+2      	; 0x844 <__addsf3x+0x1c>
 842:	e0 95       	com	r30
 844:	0b 2e       	mov	r0, r27
 846:	ba 2f       	mov	r27, r26
 848:	a0 2d       	mov	r26, r0
 84a:	0b 01       	movw	r0, r22
 84c:	b9 01       	movw	r22, r18
 84e:	90 01       	movw	r18, r0
 850:	0c 01       	movw	r0, r24
 852:	ca 01       	movw	r24, r20
 854:	a0 01       	movw	r20, r0
 856:	11 24       	eor	r1, r1
 858:	ff 27       	eor	r31, r31
 85a:	59 1b       	sub	r21, r25
 85c:	99 f0       	breq	.+38     	; 0x884 <__addsf3x+0x5c>
 85e:	59 3f       	cpi	r21, 0xF9	; 249
 860:	50 f4       	brcc	.+20     	; 0x876 <__addsf3x+0x4e>
 862:	50 3e       	cpi	r21, 0xE0	; 224
 864:	68 f1       	brcs	.+90     	; 0x8c0 <__addsf3x+0x98>
 866:	1a 16       	cp	r1, r26
 868:	f0 40       	sbci	r31, 0x00	; 0
 86a:	a2 2f       	mov	r26, r18
 86c:	23 2f       	mov	r18, r19
 86e:	34 2f       	mov	r19, r20
 870:	44 27       	eor	r20, r20
 872:	58 5f       	subi	r21, 0xF8	; 248
 874:	f3 cf       	rjmp	.-26     	; 0x85c <__addsf3x+0x34>
 876:	46 95       	lsr	r20
 878:	37 95       	ror	r19
 87a:	27 95       	ror	r18
 87c:	a7 95       	ror	r26
 87e:	f0 40       	sbci	r31, 0x00	; 0
 880:	53 95       	inc	r21
 882:	c9 f7       	brne	.-14     	; 0x876 <__addsf3x+0x4e>
 884:	7e f4       	brtc	.+30     	; 0x8a4 <__addsf3x+0x7c>
 886:	1f 16       	cp	r1, r31
 888:	ba 0b       	sbc	r27, r26
 88a:	62 0b       	sbc	r22, r18
 88c:	73 0b       	sbc	r23, r19
 88e:	84 0b       	sbc	r24, r20
 890:	ba f0       	brmi	.+46     	; 0x8c0 <__addsf3x+0x98>
 892:	91 50       	subi	r25, 0x01	; 1
 894:	a1 f0       	breq	.+40     	; 0x8be <__addsf3x+0x96>
 896:	ff 0f       	add	r31, r31
 898:	bb 1f       	adc	r27, r27
 89a:	66 1f       	adc	r22, r22
 89c:	77 1f       	adc	r23, r23
 89e:	88 1f       	adc	r24, r24
 8a0:	c2 f7       	brpl	.-16     	; 0x892 <__addsf3x+0x6a>
 8a2:	0e c0       	rjmp	.+28     	; 0x8c0 <__addsf3x+0x98>
 8a4:	ba 0f       	add	r27, r26
 8a6:	62 1f       	adc	r22, r18
 8a8:	73 1f       	adc	r23, r19
 8aa:	84 1f       	adc	r24, r20
 8ac:	48 f4       	brcc	.+18     	; 0x8c0 <__addsf3x+0x98>
 8ae:	87 95       	ror	r24
 8b0:	77 95       	ror	r23
 8b2:	67 95       	ror	r22
 8b4:	b7 95       	ror	r27
 8b6:	f7 95       	ror	r31
 8b8:	9e 3f       	cpi	r25, 0xFE	; 254
 8ba:	08 f0       	brcs	.+2      	; 0x8be <__addsf3x+0x96>
 8bc:	b3 cf       	rjmp	.-154    	; 0x824 <__addsf3+0x1e>
 8be:	93 95       	inc	r25
 8c0:	88 0f       	add	r24, r24
 8c2:	08 f0       	brcs	.+2      	; 0x8c6 <__addsf3x+0x9e>
 8c4:	99 27       	eor	r25, r25
 8c6:	ee 0f       	add	r30, r30
 8c8:	97 95       	ror	r25
 8ca:	87 95       	ror	r24
 8cc:	08 95       	ret

000008ce <__cmpsf2>:
 8ce:	40 d0       	rcall	.+128    	; 0x950 <__fp_cmp>
 8d0:	08 f4       	brcc	.+2      	; 0x8d4 <__cmpsf2+0x6>
 8d2:	81 e0       	ldi	r24, 0x01	; 1
 8d4:	08 95       	ret

000008d6 <__floatunsisf>:
 8d6:	e8 94       	clt
 8d8:	09 c0       	rjmp	.+18     	; 0x8ec <__floatsisf+0x12>

000008da <__floatsisf>:
 8da:	97 fb       	bst	r25, 7
 8dc:	3e f4       	brtc	.+14     	; 0x8ec <__floatsisf+0x12>
 8de:	90 95       	com	r25
 8e0:	80 95       	com	r24
 8e2:	70 95       	com	r23
 8e4:	61 95       	neg	r22
 8e6:	7f 4f       	sbci	r23, 0xFF	; 255
 8e8:	8f 4f       	sbci	r24, 0xFF	; 255
 8ea:	9f 4f       	sbci	r25, 0xFF	; 255
 8ec:	99 23       	and	r25, r25
 8ee:	a9 f0       	breq	.+42     	; 0x91a <__floatsisf+0x40>
 8f0:	f9 2f       	mov	r31, r25
 8f2:	96 e9       	ldi	r25, 0x96	; 150
 8f4:	bb 27       	eor	r27, r27
 8f6:	93 95       	inc	r25
 8f8:	f6 95       	lsr	r31
 8fa:	87 95       	ror	r24
 8fc:	77 95       	ror	r23
 8fe:	67 95       	ror	r22
 900:	b7 95       	ror	r27
 902:	f1 11       	cpse	r31, r1
 904:	f8 cf       	rjmp	.-16     	; 0x8f6 <__floatsisf+0x1c>
 906:	fa f4       	brpl	.+62     	; 0x946 <__floatsisf+0x6c>
 908:	bb 0f       	add	r27, r27
 90a:	11 f4       	brne	.+4      	; 0x910 <__floatsisf+0x36>
 90c:	60 ff       	sbrs	r22, 0
 90e:	1b c0       	rjmp	.+54     	; 0x946 <__floatsisf+0x6c>
 910:	6f 5f       	subi	r22, 0xFF	; 255
 912:	7f 4f       	sbci	r23, 0xFF	; 255
 914:	8f 4f       	sbci	r24, 0xFF	; 255
 916:	9f 4f       	sbci	r25, 0xFF	; 255
 918:	16 c0       	rjmp	.+44     	; 0x946 <__floatsisf+0x6c>
 91a:	88 23       	and	r24, r24
 91c:	11 f0       	breq	.+4      	; 0x922 <__floatsisf+0x48>
 91e:	96 e9       	ldi	r25, 0x96	; 150
 920:	11 c0       	rjmp	.+34     	; 0x944 <__floatsisf+0x6a>
 922:	77 23       	and	r23, r23
 924:	21 f0       	breq	.+8      	; 0x92e <__floatsisf+0x54>
 926:	9e e8       	ldi	r25, 0x8E	; 142
 928:	87 2f       	mov	r24, r23
 92a:	76 2f       	mov	r23, r22
 92c:	05 c0       	rjmp	.+10     	; 0x938 <__floatsisf+0x5e>
 92e:	66 23       	and	r22, r22
 930:	71 f0       	breq	.+28     	; 0x94e <__floatsisf+0x74>
 932:	96 e8       	ldi	r25, 0x86	; 134
 934:	86 2f       	mov	r24, r22
 936:	70 e0       	ldi	r23, 0x00	; 0
 938:	60 e0       	ldi	r22, 0x00	; 0
 93a:	2a f0       	brmi	.+10     	; 0x946 <__floatsisf+0x6c>
 93c:	9a 95       	dec	r25
 93e:	66 0f       	add	r22, r22
 940:	77 1f       	adc	r23, r23
 942:	88 1f       	adc	r24, r24
 944:	da f7       	brpl	.-10     	; 0x93c <__floatsisf+0x62>
 946:	88 0f       	add	r24, r24
 948:	96 95       	lsr	r25
 94a:	87 95       	ror	r24
 94c:	97 f9       	bld	r25, 7
 94e:	08 95       	ret

00000950 <__fp_cmp>:
 950:	99 0f       	add	r25, r25
 952:	00 08       	sbc	r0, r0
 954:	55 0f       	add	r21, r21
 956:	aa 0b       	sbc	r26, r26
 958:	e0 e8       	ldi	r30, 0x80	; 128
 95a:	fe ef       	ldi	r31, 0xFE	; 254
 95c:	16 16       	cp	r1, r22
 95e:	17 06       	cpc	r1, r23
 960:	e8 07       	cpc	r30, r24
 962:	f9 07       	cpc	r31, r25
 964:	c0 f0       	brcs	.+48     	; 0x996 <__fp_cmp+0x46>
 966:	12 16       	cp	r1, r18
 968:	13 06       	cpc	r1, r19
 96a:	e4 07       	cpc	r30, r20
 96c:	f5 07       	cpc	r31, r21
 96e:	98 f0       	brcs	.+38     	; 0x996 <__fp_cmp+0x46>
 970:	62 1b       	sub	r22, r18
 972:	73 0b       	sbc	r23, r19
 974:	84 0b       	sbc	r24, r20
 976:	95 0b       	sbc	r25, r21
 978:	39 f4       	brne	.+14     	; 0x988 <__fp_cmp+0x38>
 97a:	0a 26       	eor	r0, r26
 97c:	61 f0       	breq	.+24     	; 0x996 <__fp_cmp+0x46>
 97e:	23 2b       	or	r18, r19
 980:	24 2b       	or	r18, r20
 982:	25 2b       	or	r18, r21
 984:	21 f4       	brne	.+8      	; 0x98e <__fp_cmp+0x3e>
 986:	08 95       	ret
 988:	0a 26       	eor	r0, r26
 98a:	09 f4       	brne	.+2      	; 0x98e <__fp_cmp+0x3e>
 98c:	a1 40       	sbci	r26, 0x01	; 1
 98e:	a6 95       	lsr	r26
 990:	8f ef       	ldi	r24, 0xFF	; 255
 992:	81 1d       	adc	r24, r1
 994:	81 1d       	adc	r24, r1
 996:	08 95       	ret

00000998 <__fp_inf>:
 998:	97 f9       	bld	r25, 7
 99a:	9f 67       	ori	r25, 0x7F	; 127
 99c:	80 e8       	ldi	r24, 0x80	; 128
 99e:	70 e0       	ldi	r23, 0x00	; 0
 9a0:	60 e0       	ldi	r22, 0x00	; 0
 9a2:	08 95       	ret

000009a4 <__fp_nan>:
 9a4:	9f ef       	ldi	r25, 0xFF	; 255
 9a6:	80 ec       	ldi	r24, 0xC0	; 192
 9a8:	08 95       	ret

000009aa <__fp_pscA>:
 9aa:	00 24       	eor	r0, r0
 9ac:	0a 94       	dec	r0
 9ae:	16 16       	cp	r1, r22
 9b0:	17 06       	cpc	r1, r23
 9b2:	18 06       	cpc	r1, r24
 9b4:	09 06       	cpc	r0, r25
 9b6:	08 95       	ret

000009b8 <__fp_pscB>:
 9b8:	00 24       	eor	r0, r0
 9ba:	0a 94       	dec	r0
 9bc:	12 16       	cp	r1, r18
 9be:	13 06       	cpc	r1, r19
 9c0:	14 06       	cpc	r1, r20
 9c2:	05 06       	cpc	r0, r21
 9c4:	08 95       	ret

000009c6 <__fp_round>:
 9c6:	09 2e       	mov	r0, r25
 9c8:	03 94       	inc	r0
 9ca:	00 0c       	add	r0, r0
 9cc:	11 f4       	brne	.+4      	; 0x9d2 <__fp_round+0xc>
 9ce:	88 23       	and	r24, r24
 9d0:	52 f0       	brmi	.+20     	; 0x9e6 <__fp_round+0x20>
 9d2:	bb 0f       	add	r27, r27
 9d4:	40 f4       	brcc	.+16     	; 0x9e6 <__fp_round+0x20>
 9d6:	bf 2b       	or	r27, r31
 9d8:	11 f4       	brne	.+4      	; 0x9de <__fp_round+0x18>
 9da:	60 ff       	sbrs	r22, 0
 9dc:	04 c0       	rjmp	.+8      	; 0x9e6 <__fp_round+0x20>
 9de:	6f 5f       	subi	r22, 0xFF	; 255
 9e0:	7f 4f       	sbci	r23, 0xFF	; 255
 9e2:	8f 4f       	sbci	r24, 0xFF	; 255
 9e4:	9f 4f       	sbci	r25, 0xFF	; 255
 9e6:	08 95       	ret

000009e8 <__fp_split3>:
 9e8:	57 fd       	sbrc	r21, 7
 9ea:	90 58       	subi	r25, 0x80	; 128
 9ec:	44 0f       	add	r20, r20
 9ee:	55 1f       	adc	r21, r21
 9f0:	59 f0       	breq	.+22     	; 0xa08 <__fp_splitA+0x10>
 9f2:	5f 3f       	cpi	r21, 0xFF	; 255
 9f4:	71 f0       	breq	.+28     	; 0xa12 <__fp_splitA+0x1a>
 9f6:	47 95       	ror	r20

000009f8 <__fp_splitA>:
 9f8:	88 0f       	add	r24, r24
 9fa:	97 fb       	bst	r25, 7
 9fc:	99 1f       	adc	r25, r25
 9fe:	61 f0       	breq	.+24     	; 0xa18 <__fp_splitA+0x20>
 a00:	9f 3f       	cpi	r25, 0xFF	; 255
 a02:	79 f0       	breq	.+30     	; 0xa22 <__fp_splitA+0x2a>
 a04:	87 95       	ror	r24
 a06:	08 95       	ret
 a08:	12 16       	cp	r1, r18
 a0a:	13 06       	cpc	r1, r19
 a0c:	14 06       	cpc	r1, r20
 a0e:	55 1f       	adc	r21, r21
 a10:	f2 cf       	rjmp	.-28     	; 0x9f6 <__fp_split3+0xe>
 a12:	46 95       	lsr	r20
 a14:	f1 df       	rcall	.-30     	; 0x9f8 <__fp_splitA>
 a16:	08 c0       	rjmp	.+16     	; 0xa28 <__fp_splitA+0x30>
 a18:	16 16       	cp	r1, r22
 a1a:	17 06       	cpc	r1, r23
 a1c:	18 06       	cpc	r1, r24
 a1e:	99 1f       	adc	r25, r25
 a20:	f1 cf       	rjmp	.-30     	; 0xa04 <__fp_splitA+0xc>
 a22:	86 95       	lsr	r24
 a24:	71 05       	cpc	r23, r1
 a26:	61 05       	cpc	r22, r1
 a28:	08 94       	sec
 a2a:	08 95       	ret

00000a2c <__fp_zero>:
 a2c:	e8 94       	clt

00000a2e <__fp_szero>:
 a2e:	bb 27       	eor	r27, r27
 a30:	66 27       	eor	r22, r22
 a32:	77 27       	eor	r23, r23
 a34:	cb 01       	movw	r24, r22
 a36:	97 f9       	bld	r25, 7
 a38:	08 95       	ret

00000a3a <__gesf2>:
 a3a:	8a df       	rcall	.-236    	; 0x950 <__fp_cmp>
 a3c:	08 f4       	brcc	.+2      	; 0xa40 <__gesf2+0x6>
 a3e:	8f ef       	ldi	r24, 0xFF	; 255
 a40:	08 95       	ret

00000a42 <__mulsf3>:
 a42:	0a d0       	rcall	.+20     	; 0xa58 <__mulsf3x>
 a44:	c0 cf       	rjmp	.-128    	; 0x9c6 <__fp_round>
 a46:	b1 df       	rcall	.-158    	; 0x9aa <__fp_pscA>
 a48:	28 f0       	brcs	.+10     	; 0xa54 <__mulsf3+0x12>
 a4a:	b6 df       	rcall	.-148    	; 0x9b8 <__fp_pscB>
 a4c:	18 f0       	brcs	.+6      	; 0xa54 <__mulsf3+0x12>
 a4e:	95 23       	and	r25, r21
 a50:	09 f0       	breq	.+2      	; 0xa54 <__mulsf3+0x12>
 a52:	a2 cf       	rjmp	.-188    	; 0x998 <__fp_inf>
 a54:	a7 cf       	rjmp	.-178    	; 0x9a4 <__fp_nan>
 a56:	eb cf       	rjmp	.-42     	; 0xa2e <__fp_szero>

00000a58 <__mulsf3x>:
 a58:	c7 df       	rcall	.-114    	; 0x9e8 <__fp_split3>
 a5a:	a8 f3       	brcs	.-22     	; 0xa46 <__mulsf3+0x4>

00000a5c <__mulsf3_pse>:
 a5c:	99 23       	and	r25, r25
 a5e:	d9 f3       	breq	.-10     	; 0xa56 <__mulsf3+0x14>
 a60:	55 23       	and	r21, r21
 a62:	c9 f3       	breq	.-14     	; 0xa56 <__mulsf3+0x14>
 a64:	95 0f       	add	r25, r21
 a66:	50 e0       	ldi	r21, 0x00	; 0
 a68:	55 1f       	adc	r21, r21
 a6a:	aa 27       	eor	r26, r26
 a6c:	ee 27       	eor	r30, r30
 a6e:	ff 27       	eor	r31, r31
 a70:	bb 27       	eor	r27, r27
 a72:	00 24       	eor	r0, r0
 a74:	08 94       	sec
 a76:	67 95       	ror	r22
 a78:	20 f4       	brcc	.+8      	; 0xa82 <__mulsf3_pse+0x26>
 a7a:	e2 0f       	add	r30, r18
 a7c:	f3 1f       	adc	r31, r19
 a7e:	b4 1f       	adc	r27, r20
 a80:	0a 1e       	adc	r0, r26
 a82:	22 0f       	add	r18, r18
 a84:	33 1f       	adc	r19, r19
 a86:	44 1f       	adc	r20, r20
 a88:	aa 1f       	adc	r26, r26
 a8a:	66 95       	lsr	r22
 a8c:	a9 f7       	brne	.-22     	; 0xa78 <__mulsf3_pse+0x1c>
 a8e:	77 95       	ror	r23
 a90:	30 f4       	brcc	.+12     	; 0xa9e <__mulsf3_pse+0x42>
 a92:	f3 0f       	add	r31, r19
 a94:	b4 1f       	adc	r27, r20
 a96:	0a 1e       	adc	r0, r26
 a98:	12 1e       	adc	r1, r18
 a9a:	08 f4       	brcc	.+2      	; 0xa9e <__mulsf3_pse+0x42>
 a9c:	63 95       	inc	r22
 a9e:	33 0f       	add	r19, r19
 aa0:	44 1f       	adc	r20, r20
 aa2:	aa 1f       	adc	r26, r26
 aa4:	22 1f       	adc	r18, r18
 aa6:	76 95       	lsr	r23
 aa8:	99 f7       	brne	.-26     	; 0xa90 <__mulsf3_pse+0x34>
 aaa:	87 95       	ror	r24
 aac:	20 f4       	brcc	.+8      	; 0xab6 <__mulsf3_pse+0x5a>
 aae:	b4 0f       	add	r27, r20
 ab0:	0a 1e       	adc	r0, r26
 ab2:	12 1e       	adc	r1, r18
 ab4:	63 1f       	adc	r22, r19
 ab6:	44 0f       	add	r20, r20
 ab8:	aa 1f       	adc	r26, r26
 aba:	22 1f       	adc	r18, r18
 abc:	33 1f       	adc	r19, r19
 abe:	86 95       	lsr	r24
 ac0:	a9 f7       	brne	.-22     	; 0xaac <__mulsf3_pse+0x50>
 ac2:	86 2f       	mov	r24, r22
 ac4:	71 2d       	mov	r23, r1
 ac6:	60 2d       	mov	r22, r0
 ac8:	11 24       	eor	r1, r1
 aca:	9f 57       	subi	r25, 0x7F	; 127
 acc:	50 40       	sbci	r21, 0x00	; 0
 ace:	8a f0       	brmi	.+34     	; 0xaf2 <__mulsf3_pse+0x96>
 ad0:	e1 f0       	breq	.+56     	; 0xb0a <__mulsf3_pse+0xae>
 ad2:	88 23       	and	r24, r24
 ad4:	4a f0       	brmi	.+18     	; 0xae8 <__mulsf3_pse+0x8c>
 ad6:	ee 0f       	add	r30, r30
 ad8:	ff 1f       	adc	r31, r31
 ada:	bb 1f       	adc	r27, r27
 adc:	66 1f       	adc	r22, r22
 ade:	77 1f       	adc	r23, r23
 ae0:	88 1f       	adc	r24, r24
 ae2:	91 50       	subi	r25, 0x01	; 1
 ae4:	50 40       	sbci	r21, 0x00	; 0
 ae6:	a9 f7       	brne	.-22     	; 0xad2 <__mulsf3_pse+0x76>
 ae8:	9e 3f       	cpi	r25, 0xFE	; 254
 aea:	51 05       	cpc	r21, r1
 aec:	70 f0       	brcs	.+28     	; 0xb0a <__mulsf3_pse+0xae>
 aee:	54 cf       	rjmp	.-344    	; 0x998 <__fp_inf>
 af0:	9e cf       	rjmp	.-196    	; 0xa2e <__fp_szero>
 af2:	5f 3f       	cpi	r21, 0xFF	; 255
 af4:	ec f3       	brlt	.-6      	; 0xaf0 <__mulsf3_pse+0x94>
 af6:	98 3e       	cpi	r25, 0xE8	; 232
 af8:	dc f3       	brlt	.-10     	; 0xaf0 <__mulsf3_pse+0x94>
 afa:	86 95       	lsr	r24
 afc:	77 95       	ror	r23
 afe:	67 95       	ror	r22
 b00:	b7 95       	ror	r27
 b02:	f7 95       	ror	r31
 b04:	e7 95       	ror	r30
 b06:	9f 5f       	subi	r25, 0xFF	; 255
 b08:	c1 f7       	brne	.-16     	; 0xafa <__mulsf3_pse+0x9e>
 b0a:	fe 2b       	or	r31, r30
 b0c:	88 0f       	add	r24, r24
 b0e:	91 1d       	adc	r25, r1
 b10:	96 95       	lsr	r25
 b12:	87 95       	ror	r24
 b14:	97 f9       	bld	r25, 7
 b16:	08 95       	ret

00000b18 <_exit>:
 b18:	f8 94       	cli

00000b1a <__stop_program>:
 b1a:	ff cf       	rjmp	.-2      	; 0xb1a <__stop_program>
