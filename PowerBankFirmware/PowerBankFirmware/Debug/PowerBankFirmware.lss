
PowerBankFirmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000322  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000322  000003b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800064  00800064  000003ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cb3  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000796  00000000  00000000  0000117b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000808  00000000  00000000  00001911  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000211c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000535  00000000  00000000  0000229c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000432  00000000  00000000  000027d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002c03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	c5 c0       	rjmp	.+394    	; 0x18e <__vector_1>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	d4 c0       	rjmp	.+424    	; 0x1b6 <__vector_6>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d1 e0       	ldi	r29, 0x01	; 1
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e2 e2       	ldi	r30, 0x22	; 34
  36:	f3 e0       	ldi	r31, 0x03	; 3
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a4 36       	cpi	r26, 0x64	; 100
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	20 e0       	ldi	r18, 0x00	; 0
  46:	a4 e6       	ldi	r26, 0x64	; 100
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	ac 36       	cpi	r26, 0x6C	; 108
  50:	b2 07       	cpc	r27, r18
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	10 d1       	rcall	.+544    	; 0x276 <main>
  56:	63 c1       	rjmp	.+710    	; 0x31e <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <ButtonAction>:
		//READ I2C and Update Variables Accordingly.
	}
}

void ButtonAction(void) //Determines short or long button press after interrupt and acts accordingly.
{
  5a:	cf 92       	push	r12
  5c:	df 92       	push	r13
  5e:	ef 92       	push	r14
  60:	ff 92       	push	r15
	TIMSK1 = 0b00000000;		//Pause timer for LED status
  62:	1c b8       	out	0x0c, r1	; 12
	LED1_OFF, LED2_OFF, LED3_OFF, LED4_OFF;
  64:	c0 98       	cbi	0x18, 0	; 24
  66:	df 98       	cbi	0x1b, 7	; 27
  68:	db 98       	cbi	0x1b, 3	; 27
  6a:	da 98       	cbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  6c:	2f ec       	ldi	r18, 0xCF	; 207
  6e:	81 e0       	ldi	r24, 0x01	; 1
  70:	91 e0       	ldi	r25, 0x01	; 1
  72:	21 50       	subi	r18, 0x01	; 1
  74:	80 40       	sbci	r24, 0x00	; 0
  76:	90 40       	sbci	r25, 0x00	; 0
  78:	e1 f7       	brne	.-8      	; 0x72 <ButtonAction+0x18>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <ButtonAction+0x22>
  7c:	00 00       	nop

	if (1) //press between 100 and 800ms is considered short.
	{
		_delay_ms(330);
		LED1_ON;
  7e:	c0 9a       	sbi	0x18, 0	; 24
  80:	2f ec       	ldi	r18, 0xCF	; 207
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	91 e0       	ldi	r25, 0x01	; 1
  86:	21 50       	subi	r18, 0x01	; 1
  88:	80 40       	sbci	r24, 0x00	; 0
  8a:	90 40       	sbci	r25, 0x00	; 0
  8c:	e1 f7       	brne	.-8      	; 0x86 <ButtonAction+0x2c>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <ButtonAction+0x36>
  90:	00 00       	nop
		_delay_ms(330);
		LED1_OFF;
  92:	c0 98       	cbi	0x18, 0	; 24
  94:	2f ec       	ldi	r18, 0xCF	; 207
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	91 e0       	ldi	r25, 0x01	; 1
  9a:	21 50       	subi	r18, 0x01	; 1
  9c:	80 40       	sbci	r24, 0x00	; 0
  9e:	90 40       	sbci	r25, 0x00	; 0
  a0:	e1 f7       	brne	.-8      	; 0x9a <ButtonAction+0x40>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <ButtonAction+0x4a>
  a4:	00 00       	nop
		_delay_ms(330);
		//short button press shows voltage when not charging.
		if (battPercentage >= 85)
  a6:	c0 90 68 00 	lds	r12, 0x0068	; 0x800068 <battPercentage>
  aa:	d0 90 69 00 	lds	r13, 0x0069	; 0x800069 <battPercentage+0x1>
  ae:	e0 90 6a 00 	lds	r14, 0x006A	; 0x80006a <battPercentage+0x2>
  b2:	f0 90 6b 00 	lds	r15, 0x006B	; 0x80006b <battPercentage+0x3>
  b6:	20 e0       	ldi	r18, 0x00	; 0
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	4a ea       	ldi	r20, 0xAA	; 170
  bc:	52 e4       	ldi	r21, 0x42	; 66
  be:	c7 01       	movw	r24, r14
  c0:	b6 01       	movw	r22, r12
  c2:	05 d1       	rcall	.+522    	; 0x2ce <__gesf2>
  c4:	88 23       	and	r24, r24
  c6:	2c f0       	brlt	.+10     	; 0xd2 <ButtonAction+0x78>
		{
			LED1_ON, LED2_ON, LED3_ON, LED4_ON;
  c8:	c0 9a       	sbi	0x18, 0	; 24
  ca:	df 9a       	sbi	0x1b, 7	; 27
  cc:	db 9a       	sbi	0x1b, 3	; 27
  ce:	da 9a       	sbi	0x1b, 2	; 27
  d0:	23 c0       	rjmp	.+70     	; 0x118 <ButtonAction+0xbe>
		}
		else if (battPercentage >= 60)
  d2:	20 e0       	ldi	r18, 0x00	; 0
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	40 e7       	ldi	r20, 0x70	; 112
  d8:	52 e4       	ldi	r21, 0x42	; 66
  da:	c7 01       	movw	r24, r14
  dc:	b6 01       	movw	r22, r12
  de:	f7 d0       	rcall	.+494    	; 0x2ce <__gesf2>
  e0:	88 23       	and	r24, r24
  e2:	24 f0       	brlt	.+8      	; 0xec <ButtonAction+0x92>
		{
			LED1_ON, LED2_ON, LED3_ON;
  e4:	c0 9a       	sbi	0x18, 0	; 24
  e6:	df 9a       	sbi	0x1b, 7	; 27
  e8:	db 9a       	sbi	0x1b, 3	; 27
  ea:	16 c0       	rjmp	.+44     	; 0x118 <ButtonAction+0xbe>
		}
		else if (battPercentage >= 35)
  ec:	20 e0       	ldi	r18, 0x00	; 0
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	4c e0       	ldi	r20, 0x0C	; 12
  f2:	52 e4       	ldi	r21, 0x42	; 66
  f4:	c7 01       	movw	r24, r14
  f6:	b6 01       	movw	r22, r12
  f8:	ea d0       	rcall	.+468    	; 0x2ce <__gesf2>
  fa:	88 23       	and	r24, r24
  fc:	1c f0       	brlt	.+6      	; 0x104 <ButtonAction+0xaa>
		{
			LED1_ON, LED2_ON;
  fe:	c0 9a       	sbi	0x18, 0	; 24
 100:	df 9a       	sbi	0x1b, 7	; 27
 102:	0a c0       	rjmp	.+20     	; 0x118 <ButtonAction+0xbe>
		}
		else if (battPercentage >= 10)
 104:	20 e0       	ldi	r18, 0x00	; 0
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	40 e2       	ldi	r20, 0x20	; 32
 10a:	51 e4       	ldi	r21, 0x41	; 65
 10c:	c7 01       	movw	r24, r14
 10e:	b6 01       	movw	r22, r12
 110:	de d0       	rcall	.+444    	; 0x2ce <__gesf2>
 112:	88 23       	and	r24, r24
 114:	0c f0       	brlt	.+2      	; 0x118 <ButtonAction+0xbe>
		{
			LED1_ON;
 116:	c0 9a       	sbi	0x18, 0	; 24
 118:	2f e7       	ldi	r18, 0x7F	; 127
 11a:	8a e1       	ldi	r24, 0x1A	; 26
 11c:	96 e0       	ldi	r25, 0x06	; 6
 11e:	21 50       	subi	r18, 0x01	; 1
 120:	80 40       	sbci	r24, 0x00	; 0
 122:	90 40       	sbci	r25, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <ButtonAction+0xc4>
 126:	00 c0       	rjmp	.+0      	; 0x128 <ButtonAction+0xce>
 128:	00 00       	nop
		}
		else
		{ 
		}
		_delay_ms(2000);
		LED1_OFF, LED2_OFF, LED3_OFF, LED4_OFF;
 12a:	c0 98       	cbi	0x18, 0	; 24
 12c:	df 98       	cbi	0x1b, 7	; 27
 12e:	db 98       	cbi	0x1b, 3	; 27
 130:	da 98       	cbi	0x1b, 2	; 27
		LED1_OFF, LED2_OFF, LED3_OFF, LED4_OFF;
	}
	else //Do nothing if button press is less than 100ms or other state.
	{
	}
	ledCount = 0;	//reset timer LED so we dont start halfway through cycle
 132:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <ledCount+0x1>
 136:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <ledCount>
	TIMSK1 = 0b00000010;		//Resume timer after LED status
 13a:	82 e0       	ldi	r24, 0x02	; 2
 13c:	8c b9       	out	0x0c, r24	; 12

}
 13e:	ff 90       	pop	r15
 140:	ef 90       	pop	r14
 142:	df 90       	pop	r13
 144:	cf 90       	pop	r12
 146:	08 95       	ret

00000148 <FlashLEDs>:

void FlashLEDs(int numFlashes)
{
	for (int i = 0; i < numFlashes; i++)
 148:	18 16       	cp	r1, r24
 14a:	19 06       	cpc	r1, r25
 14c:	fc f4       	brge	.+62     	; 0x18c <__stack+0x2d>
 14e:	20 e0       	ldi	r18, 0x00	; 0
 150:	30 e0       	ldi	r19, 0x00	; 0
	{
		LED1_OFF, LED2_OFF, LED3_OFF, LED4_OFF;	//all off for 250ms.
 152:	c0 98       	cbi	0x18, 0	; 24
 154:	df 98       	cbi	0x1b, 7	; 27
 156:	db 98       	cbi	0x1b, 3	; 27
 158:	da 98       	cbi	0x1b, 2	; 27
 15a:	e3 e2       	ldi	r30, 0x23	; 35
 15c:	f4 ef       	ldi	r31, 0xF4	; 244
 15e:	31 97       	sbiw	r30, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <FlashLEDs+0x16>
 162:	00 c0       	rjmp	.+0      	; 0x164 <__stack+0x5>
 164:	00 00       	nop
		_delay_ms(250);
		LED1_ON, LED2_ON, LED3_ON, LED4_ON;	//all on for 250ms.
 166:	c0 9a       	sbi	0x18, 0	; 24
 168:	df 9a       	sbi	0x1b, 7	; 27
 16a:	db 9a       	sbi	0x1b, 3	; 27
 16c:	da 9a       	sbi	0x1b, 2	; 27
 16e:	e3 e2       	ldi	r30, 0x23	; 35
 170:	f4 ef       	ldi	r31, 0xF4	; 244
 172:	31 97       	sbiw	r30, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <__stack+0x13>
 176:	00 c0       	rjmp	.+0      	; 0x178 <__stack+0x19>
 178:	00 00       	nop
		_delay_ms(250);
		LED1_OFF, LED2_OFF, LED3_OFF, LED4_OFF;	//all off for 250ms.
 17a:	c0 98       	cbi	0x18, 0	; 24
 17c:	df 98       	cbi	0x1b, 7	; 27
 17e:	db 98       	cbi	0x1b, 3	; 27
 180:	da 98       	cbi	0x1b, 2	; 27

}

void FlashLEDs(int numFlashes)
{
	for (int i = 0; i < numFlashes; i++)
 182:	2f 5f       	subi	r18, 0xFF	; 255
 184:	3f 4f       	sbci	r19, 0xFF	; 255
 186:	28 17       	cp	r18, r24
 188:	39 07       	cpc	r19, r25
 18a:	19 f7       	brne	.-58     	; 0x152 <FlashLEDs+0xa>
 18c:	08 95       	ret

0000018e <__vector_1>:
		LED1_OFF, LED2_OFF, LED3_OFF, LED4_OFF;	//all off for 250ms.
	}
}

ISR (EXT_INT0_vect)		//Interrupt based on user button push. Used to wake uC and then set flag that button has been pushed.
{
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
 198:	8f 93       	push	r24
 19a:	9f 93       	push	r25
	buttonFlag = 1;
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__data_end+0x1>
 1a4:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
}
 1a8:	9f 91       	pop	r25
 1aa:	8f 91       	pop	r24
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <__vector_6>:

ISR (TIM1_COMPA_vect)	//LED sequence to indicate battery charging.
{
 1b6:	1f 92       	push	r1
 1b8:	0f 92       	push	r0
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	0f 92       	push	r0
 1be:	11 24       	eor	r1, r1
 1c0:	8f 93       	push	r24
 1c2:	9f 93       	push	r25
	if (ledCount == 1)
 1c4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <ledCount>
 1c8:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <ledCount+0x1>
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	11 f4       	brne	.+4      	; 0x1d4 <__vector_6+0x1e>
	{
		LED1_ON;
 1d0:	c0 9a       	sbi	0x18, 0	; 24
 1d2:	17 c0       	rjmp	.+46     	; 0x202 <__vector_6+0x4c>
	}
	else if (ledCount == 2)
 1d4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <ledCount>
 1d8:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <ledCount+0x1>
 1dc:	02 97       	sbiw	r24, 0x02	; 2
 1de:	11 f4       	brne	.+4      	; 0x1e4 <__vector_6+0x2e>
	{
		LED2_ON;
 1e0:	df 9a       	sbi	0x1b, 7	; 27
 1e2:	0f c0       	rjmp	.+30     	; 0x202 <__vector_6+0x4c>
	}
	else if (ledCount == 3)
 1e4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <ledCount>
 1e8:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <ledCount+0x1>
 1ec:	03 97       	sbiw	r24, 0x03	; 3
 1ee:	11 f4       	brne	.+4      	; 0x1f4 <__vector_6+0x3e>
	{
		LED3_ON;
 1f0:	db 9a       	sbi	0x1b, 3	; 27
 1f2:	07 c0       	rjmp	.+14     	; 0x202 <__vector_6+0x4c>
	}
	else if (ledCount == 4)
 1f4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <ledCount>
 1f8:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <ledCount+0x1>
 1fc:	04 97       	sbiw	r24, 0x04	; 4
 1fe:	09 f4       	brne	.+2      	; 0x202 <__vector_6+0x4c>
	{
		LED4_ON;
 200:	da 9a       	sbi	0x1b, 2	; 27
	}
	if (ledCount > 4)
 202:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <ledCount>
 206:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <ledCount+0x1>
 20a:	05 97       	sbiw	r24, 0x05	; 5
 20c:	44 f0       	brlt	.+16     	; 0x21e <__vector_6+0x68>
	{
		ledCount = 0;
 20e:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <ledCount+0x1>
 212:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <ledCount>
		LED1_OFF, LED2_OFF, LED3_OFF, LED4_OFF;
 216:	c0 98       	cbi	0x18, 0	; 24
 218:	df 98       	cbi	0x1b, 7	; 27
 21a:	db 98       	cbi	0x1b, 3	; 27
 21c:	da 98       	cbi	0x1b, 2	; 27
	}
	ledCount++;
 21e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <ledCount>
 222:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <ledCount+0x1>
 226:	01 96       	adiw	r24, 0x01	; 1
 228:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <ledCount+0x1>
 22c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <ledCount>
}
 230:	9f 91       	pop	r25
 232:	8f 91       	pop	r24
 234:	0f 90       	pop	r0
 236:	0f be       	out	0x3f, r0	; 63
 238:	0f 90       	pop	r0
 23a:	1f 90       	pop	r1
 23c:	18 95       	reti

0000023e <Setup>:

void Setup(void)
{
	DDRA = 0b10001100;		//Set register A I/O Based on pin out in header file (1 output, 0 input).
 23e:	8c e8       	ldi	r24, 0x8C	; 140
 240:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0b00000000;		//Disable pull up resistors as we have external. Set outputs to initially low. (DDR = 0, 1 enable, 0 disable, DDR = 1, 1 high, 0 low)
 242:	1b ba       	out	0x1b, r1	; 27
	DDRB = 0b00000001;		//Set register B based on pin out in header file.
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b00000100;		//Disable pull up resistors. Set outputs initially low.
 248:	94 e0       	ldi	r25, 0x04	; 4
 24a:	98 bb       	out	0x18, r25	; 24
	
	ADMUX = 0b00000000;		//ADC ref is Vcc, No mux settings therefore ADC0 is used.
 24c:	17 b8       	out	0x07, r1	; 7
	ADCSRA = 0b11000111;	//enable (bit 7, disable before sleep) ADC and start conversion (bit 6), 128 prescaler for ADC clock.
 24e:	97 ec       	ldi	r25, 0xC7	; 199
 250:	96 b9       	out	0x06, r25	; 6
	ADCSRB = 0b00000000;	//free running mode
 252:	13 b8       	out	0x03, r1	; 3
	DIDR0 = 0b00000001;		//disable digital input buffer on ADC as recommended to reduce power consumption.
 254:	81 b9       	out	0x01, r24	; 1
	
	MCUCR = 0b00000000;		//low level of INT0 triggers interrupt
 256:	15 be       	out	0x35, r1	; 53
	GIMSK = 0b01010000;		//enable INT0 external interrupt and allow enabling of PC interrupts 0 to 7.
 258:	80 e5       	ldi	r24, 0x50	; 80
 25a:	8b bf       	out	0x3b, r24	; 59
	PCMSK0 = 0b00000000;	//Set bit 1 to 1 to enable PCINT1 interrupt. All others disabled. Only needed if using Lipo charging interrupt.
 25c:	12 ba       	out	0x12, r1	; 18

	TCCR1A = 0b00000000;	//16 bit timer in CTC mode
 25e:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0b00001100;	//prescaler 256 and CTC mode
 260:	8c e0       	ldi	r24, 0x0C	; 12
 262:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 15625/8;			//Max of 65535, ** T_int = (1Mhz/256)/OCR1A = 0.25s **
 264:	81 ea       	ldi	r24, 0xA1	; 161
 266:	97 e0       	ldi	r25, 0x07	; 7
 268:	9b bd       	out	0x2b, r25	; 43
 26a:	8a bd       	out	0x2a, r24	; 42
	TIMSK1 = 0b00000010;		//Generate interrupt on compare match of OCR1A(TCNT1)
 26c:	82 e0       	ldi	r24, 0x02	; 2
 26e:	8c b9       	out	0x0c, r24	; 12

	sei();					//global interrupts enabled
 270:	78 94       	sei

	USI_TWI_Master_Initialise();
 272:	22 d0       	rcall	.+68     	; 0x2b8 <USI_TWI_Master_Initialise>
 274:	08 95       	ret

00000276 <main>:
int buttonFlag = 0;
int flashDelay = 0;

int main(void)
{
	Setup();
 276:	e3 df       	rcall	.-58     	; 0x23e <Setup>
			buttonFlag = 0;
		}

		if (battCharging)
		{
			TIMSK1 = 0b00000010;		//Generate timer interrupt on compare match of OCR1A(TCNT1)
 278:	c2 e0       	ldi	r28, 0x02	; 2
															//4.2V = 100%, 3.5V = 0%. Making linear approximation of V vs Charge relationship. 3.5V min due to LDO cutoffs.
		if (battPercentage < 5)
		{
			//shut down BATFET via i2c. Need to plug into power source to restore BATFET.
		}
		if( chargerError)
 27a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 27e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
 282:	89 2b       	or	r24, r25
 284:	21 f0       	breq	.+8      	; 0x28e <main+0x18>
		{	
			TIMSK1 = 0b00000000; // stop timer
 286:	1c b8       	out	0x0c, r1	; 12
			FlashLEDs(1);
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	5d df       	rcall	.-326    	; 0x148 <FlashLEDs>
		}

		if (buttonFlag == 1)
 28e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 292:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__data_end+0x1>
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	29 f4       	brne	.+10     	; 0x2a4 <main+0x2e>
		{
			ButtonAction();
 29a:	df de       	rcall	.-578    	; 0x5a <ButtonAction>
			buttonFlag = 0;
 29c:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__data_end+0x1>
 2a0:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end>
		}

		if (battCharging)
 2a4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <battCharging>
 2a8:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <battCharging+0x1>
 2ac:	89 2b       	or	r24, r25
 2ae:	11 f0       	breq	.+4      	; 0x2b4 <main+0x3e>
		{
			TIMSK1 = 0b00000010;		//Generate timer interrupt on compare match of OCR1A(TCNT1)
 2b0:	cc b9       	out	0x0c, r28	; 12
 2b2:	e3 cf       	rjmp	.-58     	; 0x27a <main+0x4>
		}
		else
		{
			TIMSK1 = 0b00000000;		//Disable timer interrupt.
 2b4:	1c b8       	out	0x0c, r1	; 12
 2b6:	e1 cf       	rjmp	.-62     	; 0x27a <main+0x4>

000002b8 <USI_TWI_Master_Initialise>:
/*---------------------------------------------------------------
USI TWI single master initialization function
---------------------------------------------------------------*/
void USI_TWI_Master_Initialise( void )
{
	PORT_USI |= (1<<PIN_USI_SDA);           // Enable pullup on SDA, to set high as released state.
 2b8:	c6 9a       	sbi	0x18, 6	; 24
	PORT_USI |= (1<<PIN_USI_SCL);           // Enable pullup on SCL, to set high as released state.
 2ba:	c4 9a       	sbi	0x18, 4	; 24
	DDR_USI  |= (1<<PIN_USI_SCL);           // Enable SCL as output.
 2bc:	d4 9a       	sbi	0x1a, 4	; 26
	DDR_USI  |= (1<<PIN_USI_SDA);           // Enable SDA as output.
 2be:	d6 9a       	sbi	0x1a, 6	; 26
	USIDR    =  0xFF;                       // Preload dataregister with "released level" data.
 2c0:	8f ef       	ldi	r24, 0xFF	; 255
 2c2:	8f b9       	out	0x0f, r24	; 15
	USICR    =  (0<<USISIE)|(0<<USIOIE)|                            // Disable Interrupts.
 2c4:	8a e2       	ldi	r24, 0x2A	; 42
 2c6:	8d b9       	out	0x0d, r24	; 13
	(1<<USIWM1)|(0<<USIWM0)|                            // Set USI in Two-wire mode.
	(1<<USICS1)|(0<<USICS0)|(1<<USICLK)|                // Software stobe as counter clock source
	(0<<USITC);
	USISR   =   (1<<USISIF)|(1<<USIOIF)|(1<<USIPF)|(1<<USIDC)|      // Clear flags,
 2c8:	80 ef       	ldi	r24, 0xF0	; 240
 2ca:	8e b9       	out	0x0e, r24	; 14
 2cc:	08 95       	ret

000002ce <__gesf2>:
 2ce:	03 d0       	rcall	.+6      	; 0x2d6 <__fp_cmp>
 2d0:	08 f4       	brcc	.+2      	; 0x2d4 <__gesf2+0x6>
 2d2:	8f ef       	ldi	r24, 0xFF	; 255
 2d4:	08 95       	ret

000002d6 <__fp_cmp>:
 2d6:	99 0f       	add	r25, r25
 2d8:	00 08       	sbc	r0, r0
 2da:	55 0f       	add	r21, r21
 2dc:	aa 0b       	sbc	r26, r26
 2de:	e0 e8       	ldi	r30, 0x80	; 128
 2e0:	fe ef       	ldi	r31, 0xFE	; 254
 2e2:	16 16       	cp	r1, r22
 2e4:	17 06       	cpc	r1, r23
 2e6:	e8 07       	cpc	r30, r24
 2e8:	f9 07       	cpc	r31, r25
 2ea:	c0 f0       	brcs	.+48     	; 0x31c <__fp_cmp+0x46>
 2ec:	12 16       	cp	r1, r18
 2ee:	13 06       	cpc	r1, r19
 2f0:	e4 07       	cpc	r30, r20
 2f2:	f5 07       	cpc	r31, r21
 2f4:	98 f0       	brcs	.+38     	; 0x31c <__fp_cmp+0x46>
 2f6:	62 1b       	sub	r22, r18
 2f8:	73 0b       	sbc	r23, r19
 2fa:	84 0b       	sbc	r24, r20
 2fc:	95 0b       	sbc	r25, r21
 2fe:	39 f4       	brne	.+14     	; 0x30e <__fp_cmp+0x38>
 300:	0a 26       	eor	r0, r26
 302:	61 f0       	breq	.+24     	; 0x31c <__fp_cmp+0x46>
 304:	23 2b       	or	r18, r19
 306:	24 2b       	or	r18, r20
 308:	25 2b       	or	r18, r21
 30a:	21 f4       	brne	.+8      	; 0x314 <__fp_cmp+0x3e>
 30c:	08 95       	ret
 30e:	0a 26       	eor	r0, r26
 310:	09 f4       	brne	.+2      	; 0x314 <__fp_cmp+0x3e>
 312:	a1 40       	sbci	r26, 0x01	; 1
 314:	a6 95       	lsr	r26
 316:	8f ef       	ldi	r24, 0xFF	; 255
 318:	81 1d       	adc	r24, r1
 31a:	81 1d       	adc	r24, r1
 31c:	08 95       	ret

0000031e <_exit>:
 31e:	f8 94       	cli

00000320 <__stop_program>:
 320:	ff cf       	rjmp	.-2      	; 0x320 <__stop_program>
