
PowerBankFirmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000012c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000534  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004a9  00000000  00000000  000006d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000024d  00000000  00000000  00000b81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00000dd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002fb  00000000  00000000  00000e44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000078  00000000  00000000  0000113f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000011b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__vector_4>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0e c0       	rjmp	.+28     	; 0x38 <__vector_13>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>
  26:	07 c0       	rjmp	.+14     	; 0x36 <__bad_interrupt>
  28:	06 c0       	rjmp	.+12     	; 0x36 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61
  32:	36 d0       	rcall	.+108    	; 0xa0 <main>
  34:	37 c0       	rjmp	.+110    	; 0xa4 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <__vector_13>:
		//test test test - BC working copy
    }
}

ISR (TIMER0_COMPA_vect)	//timer based interrupt that triggers on compare match of OCR0A and TCNT0
{
  38:	1f 92       	push	r1
  3a:	0f 92       	push	r0
  3c:	0f b6       	in	r0, 0x3f	; 63
  3e:	0f 92       	push	r0
  40:	11 24       	eor	r1, r1

}
  42:	0f 90       	pop	r0
  44:	0f be       	out	0x3f, r0	; 63
  46:	0f 90       	pop	r0
  48:	1f 90       	pop	r1
  4a:	18 95       	reti

0000004c <__vector_4>:

ISR (TIMER1_COMPA_vect) //timer based interrupt that triggers on compare match of OCR1A and TCNT1
{
  4c:	1f 92       	push	r1
  4e:	0f 92       	push	r0
  50:	0f b6       	in	r0, 0x3f	; 63
  52:	0f 92       	push	r0
  54:	11 24       	eor	r1, r1
  56:	8f 93       	push	r24
  58:	9f 93       	push	r25
	LED_TOGGLE;
  5a:	98 b3       	in	r25, 0x18	; 24
  5c:	81 e0       	ldi	r24, 0x01	; 1
  5e:	89 27       	eor	r24, r25
  60:	88 bb       	out	0x18, r24	; 24
}
  62:	9f 91       	pop	r25
  64:	8f 91       	pop	r24
  66:	0f 90       	pop	r0
  68:	0f be       	out	0x3f, r0	; 63
  6a:	0f 90       	pop	r0
  6c:	1f 90       	pop	r1
  6e:	18 95       	reti

00000070 <setup>:

void setup(void)
{
	DDRA = 0b00000000;		//Set register A to all inputs (0)
  70:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0b11111111;		//enable all PORTA pull up resistors (1 enable , 0 disable)
  72:	8f ef       	ldi	r24, 0xFF	; 255
  74:	8b bb       	out	0x1b, r24	; 27
	DDRB = 0b11111111;		//Set register B to all outputs (1)
  76:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b00000000;		//all PORTB outputs initially low (1 high, 0 low)
  78:	18 ba       	out	0x18, r1	; 24
	DDRD = 0b00000000;		//Set register D to all inputs (0)
  7a:	11 ba       	out	0x11, r1	; 17
	PORTD = 0b11111111;		//enable all PORTD pull up resistors (1 enable, 0 disable)
  7c:	82 bb       	out	0x12, r24	; 18
	TCCR0A = 0x02;			//8 bit timer in CTC mode
  7e:	82 e0       	ldi	r24, 0x02	; 2
  80:	80 bf       	out	0x30, r24	; 48
	TCCR0B = 0x04;			//prescaler 256, 256us
  82:	84 e0       	ldi	r24, 0x04	; 4
  84:	83 bf       	out	0x33, r24	; 51
	OCR0A = (31250 / 1000);			//interrupt every 1ms (125us * 31250 / 1000 = 1ms)
  86:	8f e1       	ldi	r24, 0x1F	; 31
  88:	86 bf       	out	0x36, r24	; 54
	TCCR1A = 0x00;			//16 bit timer in CTC mode
  8a:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0x0C;			//prescaler 256, 256us.
  8c:	8c e0       	ldi	r24, 0x0C	; 12
  8e:	8e bd       	out	0x2e, r24	; 46
	OCR1A = (31250);			//interrupt every 1s (125us * 31250 = 1s)
  90:	82 e1       	ldi	r24, 0x12	; 18
  92:	9a e7       	ldi	r25, 0x7A	; 122
  94:	9b bd       	out	0x2b, r25	; 43
  96:	8a bd       	out	0x2a, r24	; 42
	TIMSK = 0x41;			//Compare match on OCR1A(TCNT1) and OCR0A(TCNT0)
  98:	81 e4       	ldi	r24, 0x41	; 65
  9a:	89 bf       	out	0x39, r24	; 57
	sei();					//global interrupts enabled
  9c:	78 94       	sei
  9e:	08 95       	ret

000000a0 <main>:
//bit masking of IO
#define LED_TOGGLE (PORTB ^= (1<<0))

int main(void)
{
	setup();
  a0:	e7 df       	rcall	.-50     	; 0x70 <setup>

    while (1) 
    {
		//test test test - BC working copy
    }
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <main+0x2>

000000a4 <_exit>:
  a4:	f8 94       	cli

000000a6 <__stop_program>:
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <__stop_program>
