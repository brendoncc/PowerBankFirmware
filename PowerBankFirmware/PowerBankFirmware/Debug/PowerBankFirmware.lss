
PowerBankFirmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000222  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  00000222  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000222  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b2e  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000075a  00000000  00000000  00000e66  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000073d  00000000  00000000  000015c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  00001d00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000050b  00000000  00000000  00001eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000431  00000000  00000000  000023bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000027ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	36 c0       	rjmp	.+108    	; 0x70 <__vector_1>
   4:	1e c0       	rjmp	.+60     	; 0x42 <__bad_interrupt>
   6:	1d c0       	rjmp	.+58     	; 0x42 <__bad_interrupt>
   8:	1c c0       	rjmp	.+56     	; 0x42 <__bad_interrupt>
   a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__vector_6>
   e:	19 c0       	rjmp	.+50     	; 0x42 <__bad_interrupt>
  10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
  12:	17 c0       	rjmp	.+46     	; 0x42 <__bad_interrupt>
  14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
  16:	15 c0       	rjmp	.+42     	; 0x42 <__bad_interrupt>
  18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
  1a:	13 c0       	rjmp	.+38     	; 0x42 <__bad_interrupt>
  1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
  1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
  20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d1 e0       	ldi	r29, 0x01	; 1
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
  2e:	20 e0       	ldi	r18, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
  36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
  38:	a6 36       	cpi	r26, 0x66	; 102
  3a:	b2 07       	cpc	r27, r18
  3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
  3e:	98 d0       	rcall	.+304    	; 0x170 <main>
  40:	b4 c0       	rjmp	.+360    	; 0x1aa <_exit>

00000042 <__bad_interrupt>:
  42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <ButtonAction>:
{
	//show battery voltage
}

void ButtonLong(void)
{
  44:	86 b3       	in	r24, 0x16	; 22
  46:	84 70       	andi	r24, 0x04	; 4
  48:	86 bb       	out	0x16, r24	; 22
  4a:	81 11       	cpse	r24, r1
  4c:	10 c0       	rjmp	.+32     	; 0x6e <ButtonAction+0x2a>
  4e:	28 ec       	ldi	r18, 0xC8	; 200
  50:	30 e0       	ldi	r19, 0x00	; 0
  52:	83 ec       	ldi	r24, 0xC3	; 195
  54:	99 e0       	ldi	r25, 0x09	; 9
  56:	01 97       	sbiw	r24, 0x01	; 1
  58:	f1 f7       	brne	.-4      	; 0x56 <ButtonAction+0x12>
  5a:	00 c0       	rjmp	.+0      	; 0x5c <ButtonAction+0x18>
  5c:	00 00       	nop
  5e:	86 b3       	in	r24, 0x16	; 22
  60:	84 70       	andi	r24, 0x04	; 4
  62:	86 bb       	out	0x16, r24	; 22
  64:	81 11       	cpse	r24, r1
  66:	03 c0       	rjmp	.+6      	; 0x6e <ButtonAction+0x2a>
  68:	21 50       	subi	r18, 0x01	; 1
  6a:	31 09       	sbc	r19, r1
  6c:	91 f7       	brne	.-28     	; 0x52 <ButtonAction+0xe>
  6e:	08 95       	ret

00000070 <__vector_1>:
		//tbd
	}
}

ISR (EXT_INT0_vect)		//Interrupt based on user button push. Used to wake uC and then determine short or long press.
{
  70:	1f 92       	push	r1
  72:	0f 92       	push	r0
  74:	0f b6       	in	r0, 0x3f	; 63
  76:	0f 92       	push	r0
  78:	11 24       	eor	r1, r1
  7a:	2f 93       	push	r18
  7c:	3f 93       	push	r19
  7e:	4f 93       	push	r20
  80:	5f 93       	push	r21
  82:	6f 93       	push	r22
  84:	7f 93       	push	r23
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
  8a:	af 93       	push	r26
  8c:	bf 93       	push	r27
  8e:	ef 93       	push	r30
  90:	ff 93       	push	r31
	ButtonAction();
  92:	d8 df       	rcall	.-80     	; 0x44 <ButtonAction>

}
  94:	ff 91       	pop	r31
  96:	ef 91       	pop	r30
  98:	bf 91       	pop	r27
  9a:	af 91       	pop	r26
  9c:	9f 91       	pop	r25
  9e:	8f 91       	pop	r24
  a0:	7f 91       	pop	r23
  a2:	6f 91       	pop	r22
  a4:	5f 91       	pop	r21
  a6:	4f 91       	pop	r20
  a8:	3f 91       	pop	r19
  aa:	2f 91       	pop	r18
  ac:	0f 90       	pop	r0
  ae:	0f be       	out	0x3f, r0	; 63
  b0:	0f 90       	pop	r0
  b2:	1f 90       	pop	r1
  b4:	18 95       	reti

000000b6 <__vector_6>:

ISR (TIM1_COMPA_vect)
{	
  b6:	1f 92       	push	r1
  b8:	0f 92       	push	r0
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	0f 92       	push	r0
  be:	11 24       	eor	r1, r1
  c0:	8f 93       	push	r24
  c2:	9f 93       	push	r25
	if (ledCount == 1)
  c4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  c8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	11 f4       	brne	.+4      	; 0xd4 <__vector_6+0x1e>
	{
		LED1_ON;
  d0:	c0 9a       	sbi	0x18, 0	; 24
  d2:	17 c0       	rjmp	.+46     	; 0x102 <__vector_6+0x4c>
	}
	else if (ledCount == 2)
  d4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  d8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  dc:	02 97       	sbiw	r24, 0x02	; 2
  de:	11 f4       	brne	.+4      	; 0xe4 <__vector_6+0x2e>
	{
		LED2_ON;
  e0:	d8 9a       	sbi	0x1b, 0	; 27
  e2:	0f c0       	rjmp	.+30     	; 0x102 <__vector_6+0x4c>
	}
	else if (ledCount == 3)
  e4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  e8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  ec:	03 97       	sbiw	r24, 0x03	; 3
  ee:	11 f4       	brne	.+4      	; 0xf4 <__vector_6+0x3e>
	{
		LED3_ON;
  f0:	db 9a       	sbi	0x1b, 3	; 27
  f2:	07 c0       	rjmp	.+14     	; 0x102 <__vector_6+0x4c>
	}
	else if (ledCount == 4)
  f4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  f8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  fc:	04 97       	sbiw	r24, 0x04	; 4
  fe:	09 f4       	brne	.+2      	; 0x102 <__vector_6+0x4c>
	{
		LED4_ON;
 100:	da 9a       	sbi	0x1b, 2	; 27
	}
	if (ledCount > 4)
 102:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 106:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 10a:	05 97       	sbiw	r24, 0x05	; 5
 10c:	44 f0       	brlt	.+16     	; 0x11e <__vector_6+0x68>
	{
		ledCount = 0;
 10e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
 112:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
		LED1_OFF, LED2_OFF, LED3_OFF, LED4_OFF;
 116:	c0 98       	cbi	0x18, 0	; 24
 118:	d8 98       	cbi	0x1b, 0	; 27
 11a:	db 98       	cbi	0x1b, 3	; 27
 11c:	da 98       	cbi	0x1b, 2	; 27
	}
	ledCount++;
 11e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 122:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 126:	01 96       	adiw	r24, 0x01	; 1
 128:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 12c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
}
 130:	9f 91       	pop	r25
 132:	8f 91       	pop	r24
 134:	0f 90       	pop	r0
 136:	0f be       	out	0x3f, r0	; 63
 138:	0f 90       	pop	r0
 13a:	1f 90       	pop	r1
 13c:	18 95       	reti

0000013e <Setup>:

void Setup(void)
{
	DDRA = 0b10001100;		//Set register A I/O Based on pin out in header file (1 output, 0 input).
 13e:	8c e8       	ldi	r24, 0x8C	; 140
 140:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0b00000000;		//Disable pull up resistors as we have external. Set outputs to initially low. (DDR = 0, 1 enable, 0 disable, DDR = 1, 1 high, 0 low)
 142:	1b ba       	out	0x1b, r1	; 27
	DDRB = 0b00000001;		//Set register B based on pin out in header file.
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b00000100;		//Disable pull up resistors. Set outputs initially low.
 148:	94 e0       	ldi	r25, 0x04	; 4
 14a:	98 bb       	out	0x18, r25	; 24

	ADCSRA = 0b11000111;	//enable (bit 7, disable before sleep) ADC and start conversion (bit 6), 128 prescaler for ADC clock.
 14c:	97 ec       	ldi	r25, 0xC7	; 199
 14e:	96 b9       	out	0x06, r25	; 6
	ADCSRB = 0b00000000;	//free running mode
 150:	13 b8       	out	0x03, r1	; 3
	DIDR0 = 0b00000001;		//disable digital input buffer on ADC as recommended to reduce power consumption.
 152:	81 b9       	out	0x01, r24	; 1
		
	MCUCR = 0b00000000;		//low level of INT0 triggers interrupt
 154:	15 be       	out	0x35, r1	; 53
	GIMSK = 0b01010000;		//enable INT0 external interrupt and allow enabling of PC interrupts 0 to 7.
 156:	80 e5       	ldi	r24, 0x50	; 80
 158:	8b bf       	out	0x3b, r24	; 59
	PCMSK0 = 0b00000000;	//Set bit 1 to 1 to enable PCINT1 interrupt. All others disabled. Only needed if using Lipo charging interrupt.
 15a:	12 ba       	out	0x12, r1	; 18

	TCCR1A = 0b00000000;	//16 bit timer in CTC mode
 15c:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0b00001100;	//prescaler 256 and CTC mode
 15e:	8c e0       	ldi	r24, 0x0C	; 12
 160:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 15625;			//Max of 65535, ** T_int = (1Mhz/256)/OCR1A = 0.25s **
 162:	89 e0       	ldi	r24, 0x09	; 9
 164:	9d e3       	ldi	r25, 0x3D	; 61
 166:	9b bd       	out	0x2b, r25	; 43
 168:	8a bd       	out	0x2a, r24	; 42

	sei();					//global interrupts enabled
 16a:	78 94       	sei

	USI_TWI_Master_Initialise();
 16c:	13 d0       	rcall	.+38     	; 0x194 <USI_TWI_Master_Initialise>
 16e:	08 95       	ret

00000170 <main>:
int battVoltage = 0;
volatile int ledCount = 0;

int main(void)
{
	Setup();
 170:	e6 df       	rcall	.-52     	; 0x13e <Setup>
	while(1)
	{
		if (battCharging)
		{
			//enable timer interrupt to do LED sequence
			TIMSK1 = 0b00000010;		//Generate interrupt on compare match of OCR1A(TCNT1)
 172:	22 e0       	ldi	r18, 0x02	; 2
{
	Setup();

	while(1)
	{
		if (battCharging)
 174:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <battCharging>
 178:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <battCharging+0x1>
 17c:	89 2b       	or	r24, r25
 17e:	11 f0       	breq	.+4      	; 0x184 <main+0x14>
		{
			//enable timer interrupt to do LED sequence
			TIMSK1 = 0b00000010;		//Generate interrupt on compare match of OCR1A(TCNT1)
 180:	2c b9       	out	0x0c, r18	; 12
 182:	f8 cf       	rjmp	.-16     	; 0x174 <main+0x4>
		}
		else
		{
			//disable interrupt
			TIMSK1 = 0b00000000;
 184:	1c b8       	out	0x0c, r1	; 12
			battVoltage = ADCW;	//adcw holds full 10 bit result from ADCH and ADCL registers.	
 186:	84 b1       	in	r24, 0x04	; 4
 188:	95 b1       	in	r25, 0x05	; 5
 18a:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <battVoltage+0x1>
 18e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <battVoltage>
 192:	f0 cf       	rjmp	.-32     	; 0x174 <main+0x4>

00000194 <USI_TWI_Master_Initialise>:
/*---------------------------------------------------------------
USI TWI single master initialization function
---------------------------------------------------------------*/
void USI_TWI_Master_Initialise( void )
{
	PORT_USI |= (1<<PIN_USI_SDA);           // Enable pullup on SDA, to set high as released state.
 194:	c6 9a       	sbi	0x18, 6	; 24
	PORT_USI |= (1<<PIN_USI_SCL);           // Enable pullup on SCL, to set high as released state.
 196:	c4 9a       	sbi	0x18, 4	; 24
	DDR_USI  |= (1<<PIN_USI_SCL);           // Enable SCL as output.
 198:	d4 9a       	sbi	0x1a, 4	; 26
	DDR_USI  |= (1<<PIN_USI_SDA);           // Enable SDA as output.
 19a:	d6 9a       	sbi	0x1a, 6	; 26
	USIDR    =  0xFF;                       // Preload dataregister with "released level" data.
 19c:	8f ef       	ldi	r24, 0xFF	; 255
 19e:	8f b9       	out	0x0f, r24	; 15
	USICR    =  (0<<USISIE)|(0<<USIOIE)|                            // Disable Interrupts.
 1a0:	8a e2       	ldi	r24, 0x2A	; 42
 1a2:	8d b9       	out	0x0d, r24	; 13
	(1<<USIWM1)|(0<<USIWM0)|                            // Set USI in Two-wire mode.
	(1<<USICS1)|(0<<USICS0)|(1<<USICLK)|                // Software stobe as counter clock source
	(0<<USITC);
	USISR   =   (1<<USISIF)|(1<<USIOIF)|(1<<USIPF)|(1<<USIDC)|      // Clear flags,
 1a4:	80 ef       	ldi	r24, 0xF0	; 240
 1a6:	8e b9       	out	0x0e, r24	; 14
 1a8:	08 95       	ret

000001aa <_exit>:
 1aa:	f8 94       	cli

000001ac <__stop_program>:
 1ac:	ff cf       	rjmp	.-2      	; 0x1ac <__stop_program>
