
PowerBankFirmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000074  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000000f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000508  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000491  00000000  00000000  00000668  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000021b  00000000  00000000  00000af9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000d14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e4  00000000  00000000  00000d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  0000102c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>
  26:	07 c0       	rjmp	.+14     	; 0x36 <__bad_interrupt>
  28:	06 c0       	rjmp	.+12     	; 0x36 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61
  32:	1c d0       	rcall	.+56     	; 0x6c <main>
  34:	1d c0       	rjmp	.+58     	; 0x70 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <setup>:
    }
}

void setup(void)
{
	DDRA = 0x00;		//inputs
  38:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0x07;		//enable pullup resistors on bit 0 & 1 & 3
  3a:	87 e0       	ldi	r24, 0x07	; 7
  3c:	8b bb       	out	0x1b, r24	; 27
	DDRB = 0xFF;		//set portb to output
  3e:	8f ef       	ldi	r24, 0xFF	; 255
  40:	87 bb       	out	0x17, r24	; 23
	PORTB = 0xFF;		//outputs initially high.
  42:	88 bb       	out	0x18, r24	; 24
	DDRD = 0x60;		//bits 5 & 6 set as output.
  44:	90 e6       	ldi	r25, 0x60	; 96
  46:	91 bb       	out	0x11, r25	; 17
	PORTD = 0xFF;		//bits 5 & 6 initially high, leds off. inputs pulled up
  48:	82 bb       	out	0x12, r24	; 18
	TCCR0A = 0x02;		//8 bit timer in CTC mode
  4a:	82 e0       	ldi	r24, 0x02	; 2
  4c:	80 bf       	out	0x30, r24	; 48
	TCCR0B = 0x04;		//prescaler 256, 256us
  4e:	84 e0       	ldi	r24, 0x04	; 4
  50:	83 bf       	out	0x33, r24	; 51
	OCR0A = 156.24;		//interrupt every 5ms (125us * 156.24 = 5ms)
  52:	8c e9       	ldi	r24, 0x9C	; 156
  54:	86 bf       	out	0x36, r24	; 54
	TCCR1A = 0x00;		//16 bit timer in CTC mode
  56:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0x0C;		//prescaler 256, 256us.
  58:	8c e0       	ldi	r24, 0x0C	; 12
  5a:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 31250;		//interrupt every 1s (125us * 31250 = 1s)
  5c:	82 e1       	ldi	r24, 0x12	; 18
  5e:	9a e7       	ldi	r25, 0x7A	; 122
  60:	9b bd       	out	0x2b, r25	; 43
  62:	8a bd       	out	0x2a, r24	; 42
	TIMSK = 0x41;		//Compare match on OCR1A(TCNT1) and OCR0A(TCNT0)
  64:	81 e4       	ldi	r24, 0x41	; 65
  66:	89 bf       	out	0x39, r24	; 57
	sei();				//global interrupts enabled
  68:	78 94       	sei
  6a:	08 95       	ret

0000006c <main>:
ISR (TIMER1_COMPA_vect);
ISR (TIMER0_COMPA_vect);

int main(void)
{
	setup();
  6c:	e5 df       	rcall	.-54     	; 0x38 <setup>

    while (1) 
    {
		//test test test - BC working copy
    }
  6e:	ff cf       	rjmp	.-2      	; 0x6e <main+0x2>

00000070 <_exit>:
  70:	f8 94       	cli

00000072 <__stop_program>:
  72:	ff cf       	rjmp	.-2      	; 0x72 <__stop_program>
